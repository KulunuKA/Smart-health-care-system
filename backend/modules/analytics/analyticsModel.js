import mongoose from "mongoose";

const analyticsSchema = new mongoose.Schema({
  // Basic identification
  reportDate: {
    type: Date,
    required: true,
    default: Date.now
  },
  reportType: {
    type: String,
    required: true,
    enum: ['daily', 'weekly', 'monthly', 'yearly', 'custom']
  },
  period: {
    startDate: {
      type: Date,
      required: true
    },
    endDate: {
      type: Date,
      required: true
    }
  },

  // Patient Analytics
  patientMetrics: {
    totalPatients: {
      type: Number,
      default: 0
    },
    newPatients: {
      type: Number,
      default: 0
    },
    activePatients: {
      type: Number,
      default: 0
    },
    patientRetentionRate: {
      type: Number,
      default: 0
    },
    averageAge: {
      type: Number,
      default: 0
    },
    genderDistribution: {
      male: {
        type: Number,
        default: 0
      },
      female: {
        type: Number,
        default: 0
      },
      other: {
        type: Number,
        default: 0
      }
    },
    ageGroupDistribution: {
      '0-18': { type: Number, default: 0 },
      '19-35': { type: Number, default: 0 },
      '36-50': { type: Number, default: 0 },
      '51-65': { type: Number, default: 0 },
      '65+': { type: Number, default: 0 }
    }
  },

  // Appointment Analytics
  appointmentMetrics: {
    totalAppointments: {
      type: Number,
      default: 0
    },
    scheduledAppointments: {
      type: Number,
      default: 0
    },
    confirmedAppointments: {
      type: Number,
      default: 0
    },
    completedAppointments: {
      type: Number,
      default: 0
    },
    cancelledAppointments: {
      type: Number,
      default: 0
    },
    noShowRate: {
      type: Number,
      default: 0
    },
    averageAppointmentDuration: {
      type: Number,
      default: 0
    },
    peakHours: [{
      hour: Number,
      count: Number
    }],
    appointmentReasons: [{
      reason: String,
      count: Number
    }]
  },

  // Doctor Analytics
  doctorMetrics: {
    totalDoctors: {
      type: Number,
      default: 0
    },
    activeDoctors: {
      type: Number,
      default: 0
    },
    averagePatientsPerDoctor: {
      type: Number,
      default: 0
    },
    doctorUtilization: [{
      doctorId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User'
      },
      doctorName: String,
      appointmentCount: Number,
      utilizationRate: Number
    }]
  },

  // Financial Analytics
  financialMetrics: {
    totalRevenue: {
      type: Number,
      default: 0
    },
    paidBills: {
      type: Number,
      default: 0
    },
    unpaidBills: {
      type: Number,
      default: 0
    },
    overdueBills: {
      type: Number,
      default: 0
    },
    averageBillAmount: {
      type: Number,
      default: 0
    },
    paymentMethodDistribution: {
      card: { type: Number, default: 0 },
      bank: { type: Number, default: 0 },
      wallet: { type: Number, default: 0 }
    },
    revenueByMonth: [{
      month: String,
      year: Number,
      amount: Number
    }]
  },

  // System Performance Metrics
  systemMetrics: {
    averageResponseTime: {
      type: Number,
      default: 0
    },
    totalUsers: {
      type: Number,
      default: 0
    },
    activeUsers: {
      type: Number,
      default: 0
    },
    systemUptime: {
      type: Number,
      default: 0
    }
  },

  // Medical Analytics
  medicalMetrics: {
    commonDiagnoses: [{
      diagnosis: String,
      count: Number
    }],
    commonSymptoms: [{
      symptom: String,
      count: Number
    }],
    medicationPrescriptions: [{
      medication: String,
      count: Number
    }],
    labTestFrequency: [{
      testName: String,
      count: Number
    }],
    followUpRequired: {
      type: Number,
      default: 0
    }
  },

  // Geographic Analytics
  geographicMetrics: {
    patientDistributionByCity: [{
      city: String,
      count: Number
    }],
    patientDistributionByState: [{
      state: String,
      count: Number
    }]
  },

  // Generated by
  generatedBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },

  // Status
  status: {
    type: String,
    enum: ['generating', 'completed', 'failed'],
    default: 'generating'
  },

  // Additional metadata
  metadata: {
    type: mongoose.Schema.Types.Mixed,
    default: {}
  }
}, {
  timestamps: true
});

// Indexes for better performance
analyticsSchema.index({ reportDate: -1 });
analyticsSchema.index({ reportType: 1 });
analyticsSchema.index({ 'period.startDate': 1, 'period.endDate': 1 });
analyticsSchema.index({ generatedBy: 1 });
analyticsSchema.index({ status: 1 });

// Virtual for report duration
analyticsSchema.virtual('reportDuration').get(function() {
  if (this.period && this.period.startDate && this.period.endDate) {
    return Math.ceil((this.period.endDate - this.period.startDate) / (1000 * 60 * 60 * 24));
  }
  return 0;
});

// Ensure virtual fields are serialized
analyticsSchema.set('toJSON', { virtuals: true });

const Analytics = mongoose.model('Analytics', analyticsSchema);

export { Analytics as AnalyticsModel };
