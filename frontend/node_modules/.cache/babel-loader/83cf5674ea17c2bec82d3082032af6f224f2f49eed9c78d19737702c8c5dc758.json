{"ast":null,"code":"var _jsxFileName = \"E:\\\\Academic SLIIT\\\\Y3S1 Documents\\\\CSSE\\\\Assignment 2\\\\Smart-health-care-system\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { authService } from '../services/authService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n/**\r\n * Auth Context Provider\r\n * Manages authentication state and provides auth methods to components\r\n */\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(authReducer, {\n    user: null,\n    token: null,\n    isAuthenticated: false,\n    loading: true,\n    error: null\n  });\n  useEffect(() => {\n    // Check for existing token on app load\n    const token = localStorage.getItem('token');\n    const user = localStorage.getItem('user');\n    if (token && user) {\n      dispatch({\n        type: 'LOGIN_SUCCESS',\n        payload: {\n          user: JSON.parse(user),\n          token\n        }\n      });\n    } else {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n    }\n  }, []);\n  const login = async credentials => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n\n      // Mock authentication - simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Mock user data based on email\n      const mockUsers = {\n        'patient@demo.com': {\n          id: 1,\n          name: 'John Doe',\n          email: 'patient@demo.com',\n          role: 'patient',\n          department: null\n        },\n        'doctor@demo.com': {\n          id: 2,\n          name: 'Dr. Sarah Johnson',\n          email: 'doctor@demo.com',\n          role: 'doctor',\n          department: 'Cardiology'\n        },\n        'admin@demo.com': {\n          id: 3,\n          name: 'Admin User',\n          email: 'admin@demo.com',\n          role: 'admin',\n          department: 'Administration'\n        },\n        'staff@demo.com': {\n          id: 4,\n          name: 'Jane Smith',\n          email: 'staff@demo.com',\n          role: 'staff',\n          department: 'General Medicine'\n        },\n        'manager@demo.com': {\n          id: 5,\n          name: 'Mike Wilson',\n          email: 'manager@demo.com',\n          role: 'manager',\n          department: 'Management'\n        }\n      };\n      const user = mockUsers[credentials.email];\n      if (user && credentials.password === 'password123') {\n        const response = {\n          user,\n          token: 'mock-jwt-token-' + user.id\n        };\n        dispatch({\n          type: 'LOGIN_SUCCESS',\n          payload: response\n        });\n        localStorage.setItem('token', response.token);\n        localStorage.setItem('user', JSON.stringify(response.user));\n        return {\n          success: true\n        };\n      } else {\n        throw new Error('Invalid email or password');\n      }\n    } catch (error) {\n      dispatch({\n        type: 'LOGIN_ERROR',\n        payload: error.message\n      });\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const logout = async () => {\n    try {\n      // Mock logout - no API call needed\n      console.log('User logged out successfully');\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      dispatch({\n        type: 'LOGOUT'\n      });\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n    }\n  };\n  const updateUser = userData => {\n    dispatch({\n      type: 'UPDATE_USER',\n      payload: userData\n    });\n    localStorage.setItem('user', JSON.stringify(userData));\n  };\n  const value = {\n    ...state,\n    login,\n    logout,\n    updateUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n};\n\n/**\r\n * Auth Reducer\r\n * Handles authentication state updates\r\n */\n_s(AuthProvider, \"IrWsX8AR8o7lKftmodCJE4rAhWk=\");\n_c = AuthProvider;\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case 'LOGIN_SUCCESS':\n      return {\n        ...state,\n        user: action.payload.user,\n        token: action.payload.token,\n        isAuthenticated: true,\n        loading: false,\n        error: null\n      };\n    case 'LOGIN_ERROR':\n      return {\n        ...state,\n        loading: false,\n        error: action.payload,\n        isAuthenticated: false\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        user: null,\n        token: null,\n        isAuthenticated: false,\n        loading: false,\n        error: null\n      };\n    case 'UPDATE_USER':\n      return {\n        ...state,\n        user: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\n/**\r\n * Custom hook to use auth context\r\n */\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","authService","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","state","dispatch","authReducer","user","token","isAuthenticated","loading","error","localStorage","getItem","type","payload","JSON","parse","login","credentials","Promise","resolve","setTimeout","mockUsers","id","name","email","role","department","password","response","setItem","stringify","success","Error","message","logout","console","log","removeItem","updateUser","userData","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","action","useAuth","_s2","context","$RefreshReg$"],"sources":["E:/Academic SLIIT/Y3S1 Documents/CSSE/Assignment 2/Smart-health-care-system/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\nimport { authService } from '../services/authService';\r\n\r\nconst AuthContext = createContext();\r\n\r\n/**\r\n * Auth Context Provider\r\n * Manages authentication state and provides auth methods to components\r\n */\r\nexport const AuthProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(authReducer, {\r\n    user: null,\r\n    token: null,\r\n    isAuthenticated: false,\r\n    loading: true,\r\n    error: null\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Check for existing token on app load\r\n    const token = localStorage.getItem('token');\r\n    const user = localStorage.getItem('user');\r\n    \r\n    if (token && user) {\r\n      dispatch({\r\n        type: 'LOGIN_SUCCESS',\r\n        payload: { user: JSON.parse(user), token }\r\n      });\r\n    } else {\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n    }\r\n  }, []);\r\n\r\n  const login = async (credentials) => {\r\n    try {\r\n      dispatch({ type: 'SET_LOADING', payload: true });\r\n      \r\n      // Mock authentication - simulate API delay\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      // Mock user data based on email\r\n      const mockUsers = {\r\n        'patient@demo.com': {\r\n          id: 1,\r\n          name: 'John Doe',\r\n          email: 'patient@demo.com',\r\n          role: 'patient',\r\n          department: null\r\n        },\r\n        'doctor@demo.com': {\r\n          id: 2,\r\n          name: 'Dr. Sarah Johnson',\r\n          email: 'doctor@demo.com',\r\n          role: 'doctor',\r\n          department: 'Cardiology'\r\n        },\r\n        'admin@demo.com': {\r\n          id: 3,\r\n          name: 'Admin User',\r\n          email: 'admin@demo.com',\r\n          role: 'admin',\r\n          department: 'Administration'\r\n        },\r\n        'staff@demo.com': {\r\n          id: 4,\r\n          name: 'Jane Smith',\r\n          email: 'staff@demo.com',\r\n          role: 'staff',\r\n          department: 'General Medicine'\r\n        },\r\n        'manager@demo.com': {\r\n          id: 5,\r\n          name: 'Mike Wilson',\r\n          email: 'manager@demo.com',\r\n          role: 'manager',\r\n          department: 'Management'\r\n        }\r\n      };\r\n      \r\n      const user = mockUsers[credentials.email];\r\n      \r\n      if (user && credentials.password === 'password123') {\r\n        const response = {\r\n          user,\r\n          token: 'mock-jwt-token-' + user.id\r\n        };\r\n        \r\n        dispatch({\r\n          type: 'LOGIN_SUCCESS',\r\n          payload: response\r\n        });\r\n        \r\n        localStorage.setItem('token', response.token);\r\n        localStorage.setItem('user', JSON.stringify(response.user));\r\n        \r\n        return { success: true };\r\n      } else {\r\n        throw new Error('Invalid email or password');\r\n      }\r\n    } catch (error) {\r\n      dispatch({\r\n        type: 'LOGIN_ERROR',\r\n        payload: error.message\r\n      });\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      // Mock logout - no API call needed\r\n      console.log('User logged out successfully');\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n    } finally {\r\n      dispatch({ type: 'LOGOUT' });\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n    }\r\n  };\r\n\r\n  const updateUser = (userData) => {\r\n    dispatch({\r\n      type: 'UPDATE_USER',\r\n      payload: userData\r\n    });\r\n    localStorage.setItem('user', JSON.stringify(userData));\r\n  };\r\n\r\n  const value = {\r\n    ...state,\r\n    login,\r\n    logout,\r\n    updateUser\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n/**\r\n * Auth Reducer\r\n * Handles authentication state updates\r\n */\r\nconst authReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'SET_LOADING':\r\n      return { ...state, loading: action.payload };\r\n    case 'LOGIN_SUCCESS':\r\n      return {\r\n        ...state,\r\n        user: action.payload.user,\r\n        token: action.payload.token,\r\n        isAuthenticated: true,\r\n        loading: false,\r\n        error: null\r\n      };\r\n    case 'LOGIN_ERROR':\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: action.payload,\r\n        isAuthenticated: false\r\n      };\r\n    case 'LOGOUT':\r\n      return {\r\n        ...state,\r\n        user: null,\r\n        token: null,\r\n        isAuthenticated: false,\r\n        loading: false,\r\n        error: null\r\n      };\r\n    case 'UPDATE_USER':\r\n      return {\r\n        ...state,\r\n        user: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n/**\r\n * Custom hook to use auth context\r\n */\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC/E,SAASC,WAAW,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtD,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;;AAEnC;AACA;AACA;AACA;AACA,OAAO,MAAMQ,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,UAAU,CAACW,WAAW,EAAE;IAChDC,IAAI,EAAE,IAAI;IACVC,KAAK,EAAE,IAAI;IACXC,eAAe,EAAE,KAAK;IACtBC,OAAO,EAAE,IAAI;IACbC,KAAK,EAAE;EACT,CAAC,CAAC;EAEFf,SAAS,CAAC,MAAM;IACd;IACA,MAAMY,KAAK,GAAGI,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMN,IAAI,GAAGK,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAEzC,IAAIL,KAAK,IAAID,IAAI,EAAE;MACjBF,QAAQ,CAAC;QACPS,IAAI,EAAE,eAAe;QACrBC,OAAO,EAAE;UAAER,IAAI,EAAES,IAAI,CAACC,KAAK,CAACV,IAAI,CAAC;UAAEC;QAAM;MAC3C,CAAC,CAAC;IACJ,CAAC,MAAM;MACLH,QAAQ,CAAC;QAAES,IAAI,EAAE,aAAa;QAAEC,OAAO,EAAE;MAAM,CAAC,CAAC;IACnD;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,KAAK,GAAG,MAAOC,WAAW,IAAK;IACnC,IAAI;MACFd,QAAQ,CAAC;QAAES,IAAI,EAAE,aAAa;QAAEC,OAAO,EAAE;MAAK,CAAC,CAAC;;MAEhD;MACA,MAAM,IAAIK,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;MAEvD;MACA,MAAME,SAAS,GAAG;QAChB,kBAAkB,EAAE;UAClBC,EAAE,EAAE,CAAC;UACLC,IAAI,EAAE,UAAU;UAChBC,KAAK,EAAE,kBAAkB;UACzBC,IAAI,EAAE,SAAS;UACfC,UAAU,EAAE;QACd,CAAC;QACD,iBAAiB,EAAE;UACjBJ,EAAE,EAAE,CAAC;UACLC,IAAI,EAAE,mBAAmB;UACzBC,KAAK,EAAE,iBAAiB;UACxBC,IAAI,EAAE,QAAQ;UACdC,UAAU,EAAE;QACd,CAAC;QACD,gBAAgB,EAAE;UAChBJ,EAAE,EAAE,CAAC;UACLC,IAAI,EAAE,YAAY;UAClBC,KAAK,EAAE,gBAAgB;UACvBC,IAAI,EAAE,OAAO;UACbC,UAAU,EAAE;QACd,CAAC;QACD,gBAAgB,EAAE;UAChBJ,EAAE,EAAE,CAAC;UACLC,IAAI,EAAE,YAAY;UAClBC,KAAK,EAAE,gBAAgB;UACvBC,IAAI,EAAE,OAAO;UACbC,UAAU,EAAE;QACd,CAAC;QACD,kBAAkB,EAAE;UAClBJ,EAAE,EAAE,CAAC;UACLC,IAAI,EAAE,aAAa;UACnBC,KAAK,EAAE,kBAAkB;UACzBC,IAAI,EAAE,SAAS;UACfC,UAAU,EAAE;QACd;MACF,CAAC;MAED,MAAMrB,IAAI,GAAGgB,SAAS,CAACJ,WAAW,CAACO,KAAK,CAAC;MAEzC,IAAInB,IAAI,IAAIY,WAAW,CAACU,QAAQ,KAAK,aAAa,EAAE;QAClD,MAAMC,QAAQ,GAAG;UACfvB,IAAI;UACJC,KAAK,EAAE,iBAAiB,GAAGD,IAAI,CAACiB;QAClC,CAAC;QAEDnB,QAAQ,CAAC;UACPS,IAAI,EAAE,eAAe;UACrBC,OAAO,EAAEe;QACX,CAAC,CAAC;QAEFlB,YAAY,CAACmB,OAAO,CAAC,OAAO,EAAED,QAAQ,CAACtB,KAAK,CAAC;QAC7CI,YAAY,CAACmB,OAAO,CAAC,MAAM,EAAEf,IAAI,CAACgB,SAAS,CAACF,QAAQ,CAACvB,IAAI,CAAC,CAAC;QAE3D,OAAO;UAAE0B,OAAO,EAAE;QAAK,CAAC;MAC1B,CAAC,MAAM;QACL,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;MAC9C;IACF,CAAC,CAAC,OAAOvB,KAAK,EAAE;MACdN,QAAQ,CAAC;QACPS,IAAI,EAAE,aAAa;QACnBC,OAAO,EAAEJ,KAAK,CAACwB;MACjB,CAAC,CAAC;MACF,OAAO;QAAEF,OAAO,EAAE,KAAK;QAAEtB,KAAK,EAAEA,KAAK,CAACwB;MAAQ,CAAC;IACjD;EACF,CAAC;EAED,MAAMC,MAAM,GAAG,MAAAA,CAAA,KAAY;IACzB,IAAI;MACF;MACAC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC7C,CAAC,CAAC,OAAO3B,KAAK,EAAE;MACd0B,OAAO,CAAC1B,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACvC,CAAC,SAAS;MACRN,QAAQ,CAAC;QAAES,IAAI,EAAE;MAAS,CAAC,CAAC;MAC5BF,YAAY,CAAC2B,UAAU,CAAC,OAAO,CAAC;MAChC3B,YAAY,CAAC2B,UAAU,CAAC,MAAM,CAAC;IACjC;EACF,CAAC;EAED,MAAMC,UAAU,GAAIC,QAAQ,IAAK;IAC/BpC,QAAQ,CAAC;MACPS,IAAI,EAAE,aAAa;MACnBC,OAAO,EAAE0B;IACX,CAAC,CAAC;IACF7B,YAAY,CAACmB,OAAO,CAAC,MAAM,EAAEf,IAAI,CAACgB,SAAS,CAACS,QAAQ,CAAC,CAAC;EACxD,CAAC;EAED,MAAMC,KAAK,GAAG;IACZ,GAAGtC,KAAK;IACRc,KAAK;IACLkB,MAAM;IACNI;EACF,CAAC;EAED,oBACEzC,OAAA,CAACC,WAAW,CAAC2C,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAxC,QAAA,EAChCA;EAAQ;IAAA0C,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AACA;AACA;AACA;AAHA5C,EAAA,CAtIaF,YAAY;AAAA+C,EAAA,GAAZ/C,YAAY;AA0IzB,MAAMK,WAAW,GAAGA,CAACF,KAAK,EAAE6C,MAAM,KAAK;EACrC,QAAQA,MAAM,CAACnC,IAAI;IACjB,KAAK,aAAa;MAChB,OAAO;QAAE,GAAGV,KAAK;QAAEM,OAAO,EAAEuC,MAAM,CAAClC;MAAQ,CAAC;IAC9C,KAAK,eAAe;MAClB,OAAO;QACL,GAAGX,KAAK;QACRG,IAAI,EAAE0C,MAAM,CAAClC,OAAO,CAACR,IAAI;QACzBC,KAAK,EAAEyC,MAAM,CAAClC,OAAO,CAACP,KAAK;QAC3BC,eAAe,EAAE,IAAI;QACrBC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;MACT,CAAC;IACH,KAAK,aAAa;MAChB,OAAO;QACL,GAAGP,KAAK;QACRM,OAAO,EAAE,KAAK;QACdC,KAAK,EAAEsC,MAAM,CAAClC,OAAO;QACrBN,eAAe,EAAE;MACnB,CAAC;IACH,KAAK,QAAQ;MACX,OAAO;QACL,GAAGL,KAAK;QACRG,IAAI,EAAE,IAAI;QACVC,KAAK,EAAE,IAAI;QACXC,eAAe,EAAE,KAAK;QACtBC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;MACT,CAAC;IACH,KAAK,aAAa;MAChB,OAAO;QACL,GAAGP,KAAK;QACRG,IAAI,EAAE0C,MAAM,CAAClC;MACf,CAAC;IACH;MACE,OAAOX,KAAK;EAChB;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAM8C,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAG1D,UAAU,CAACM,WAAW,CAAC;EACvC,IAAI,CAACoD,OAAO,EAAE;IACZ,MAAM,IAAIlB,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOkB,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAAA,IAAAF,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}