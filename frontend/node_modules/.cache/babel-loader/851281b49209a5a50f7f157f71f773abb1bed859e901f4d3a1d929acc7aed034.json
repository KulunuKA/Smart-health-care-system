{"ast":null,"code":"var _jsxFileName = \"D:\\\\SLIIT\\\\Year 3\\\\CSSE\\\\Smart-health-care-system\\\\frontend\\\\src\\\\contexts\\\\NotificationContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { notificationService } from '../services/notificationService';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext();\n\n/**\r\n * Notification Context Provider\r\n * Manages notification state and provides notification methods\r\n */\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(notificationReducer, {\n    notifications: [],\n    unreadCount: 0,\n    loading: false,\n    error: null\n  });\n  useEffect(() => {\n    // Load notifications if user is authenticated\n    const token = localStorage.getItem('token');\n    if (token) {\n      loadNotifications();\n    }\n  }, []);\n  const loadNotifications = async () => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n\n      // Mock notifications data\n      const mockNotifications = [{\n        id: 1,\n        title: 'Appointment Confirmed',\n        message: 'Your appointment for tomorrow at 2:00 PM has been confirmed.',\n        type: 'appointment',\n        read: false,\n        createdAt: new Date().toISOString()\n      }, {\n        id: 2,\n        title: 'Payment Received',\n        message: 'Payment of $150.00 has been successfully processed.',\n        type: 'payment',\n        read: false,\n        createdAt: new Date(Date.now() - 3600000).toISOString()\n      }, {\n        id: 3,\n        title: 'Medical Record Updated',\n        message: 'Your medical record has been updated with new test results.',\n        type: 'record',\n        read: true,\n        createdAt: new Date(Date.now() - 7200000).toISOString()\n      }, {\n        id: 4,\n        title: 'System Maintenance',\n        message: 'Scheduled system maintenance will occur tonight from 2:00 AM to 4:00 AM.',\n        type: 'system',\n        read: true,\n        createdAt: new Date(Date.now() - 86400000).toISOString()\n      }];\n      dispatch({\n        type: 'LOAD_NOTIFICATIONS_SUCCESS',\n        payload: mockNotifications\n      });\n    } catch (error) {\n      dispatch({\n        type: 'LOAD_NOTIFICATIONS_ERROR',\n        payload: error.message\n      });\n    }\n  };\n  const markAsRead = async notificationId => {\n    try {\n      // Mock API call - no actual API call needed\n      console.log('Marking notification as read:', notificationId);\n      dispatch({\n        type: 'MARK_AS_READ',\n        payload: notificationId\n      });\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n    }\n  };\n  const markAllAsRead = async () => {\n    try {\n      // Mock API call - no actual API call needed\n      console.log('Marking all notifications as read');\n      dispatch({\n        type: 'MARK_ALL_AS_READ'\n      });\n    } catch (error) {\n      console.error('Error marking all notifications as read:', error);\n    }\n  };\n  const addNotification = notification => {\n    dispatch({\n      type: 'ADD_NOTIFICATION',\n      payload: notification\n    });\n  };\n  const showToast = (message, type = 'info') => {\n    switch (type) {\n      case 'success':\n        toast.success(message);\n        break;\n      case 'error':\n        toast.error(message);\n        break;\n      case 'warning':\n        toast.warning(message);\n        break;\n      default:\n        toast.info(message);\n    }\n  };\n  const showSuccess = message => showToast(message, 'success');\n  const showError = message => showToast(message, 'error');\n  const showWarning = message => showToast(message, 'warning');\n  const showInfo = message => showToast(message, 'info');\n  const value = {\n    ...state,\n    loadNotifications,\n    markAsRead,\n    markAllAsRead,\n    addNotification,\n    showToast,\n    showSuccess,\n    showError,\n    showWarning,\n    showInfo\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n};\n\n/**\r\n * Notification Reducer\r\n * Handles notification state updates\r\n */\n_s(NotificationProvider, \"Zb/tnBdvLN6bi+fOEm8l01kiRGg=\");\n_c = NotificationProvider;\nconst notificationReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case 'LOAD_NOTIFICATIONS_SUCCESS':\n      return {\n        ...state,\n        notifications: action.payload,\n        unreadCount: action.payload.filter(n => !n.read).length,\n        loading: false,\n        error: null\n      };\n    case 'LOAD_NOTIFICATIONS_ERROR':\n      return {\n        ...state,\n        loading: false,\n        error: action.payload\n      };\n    case 'MARK_AS_READ':\n      return {\n        ...state,\n        notifications: state.notifications.map(n => n.id === action.payload ? {\n          ...n,\n          read: true\n        } : n),\n        unreadCount: Math.max(0, state.unreadCount - 1)\n      };\n    case 'MARK_ALL_AS_READ':\n      return {\n        ...state,\n        notifications: state.notifications.map(n => ({\n          ...n,\n          read: true\n        })),\n        unreadCount: 0\n      };\n    case 'ADD_NOTIFICATION':\n      return {\n        ...state,\n        notifications: [action.payload, ...state.notifications],\n        unreadCount: state.unreadCount + 1\n      };\n    default:\n      return state;\n  }\n};\n\n/**\r\n * Custom hook to use notification context\r\n */\nexport const useNotification = () => {\n  _s2();\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotification must be used within a NotificationProvider');\n  }\n  return context;\n};\n_s2(useNotification, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","notificationService","toast","jsxDEV","_jsxDEV","NotificationContext","NotificationProvider","children","_s","state","dispatch","notificationReducer","notifications","unreadCount","loading","error","token","localStorage","getItem","loadNotifications","type","payload","mockNotifications","id","title","message","read","createdAt","Date","toISOString","now","markAsRead","notificationId","console","log","markAllAsRead","addNotification","notification","showToast","success","warning","info","showSuccess","showError","showWarning","showInfo","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","action","filter","n","length","map","Math","max","useNotification","_s2","context","Error","$RefreshReg$"],"sources":["D:/SLIIT/Year 3/CSSE/Smart-health-care-system/frontend/src/contexts/NotificationContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\nimport { notificationService } from '../services/notificationService';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst NotificationContext = createContext();\r\n\r\n/**\r\n * Notification Context Provider\r\n * Manages notification state and provides notification methods\r\n */\r\nexport const NotificationProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(notificationReducer, {\r\n    notifications: [],\r\n    unreadCount: 0,\r\n    loading: false,\r\n    error: null\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Load notifications if user is authenticated\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      loadNotifications();\r\n    }\r\n  }, []);\r\n\r\n  const loadNotifications = async () => {\r\n    try {\r\n      dispatch({ type: 'SET_LOADING', payload: true });\r\n      \r\n      // Mock notifications data\r\n      const mockNotifications = [\r\n        {\r\n          id: 1,\r\n          title: 'Appointment Confirmed',\r\n          message: 'Your appointment for tomorrow at 2:00 PM has been confirmed.',\r\n          type: 'appointment',\r\n          read: false,\r\n          createdAt: new Date().toISOString()\r\n        },\r\n        {\r\n          id: 2,\r\n          title: 'Payment Received',\r\n          message: 'Payment of $150.00 has been successfully processed.',\r\n          type: 'payment',\r\n          read: false,\r\n          createdAt: new Date(Date.now() - 3600000).toISOString()\r\n        },\r\n        {\r\n          id: 3,\r\n          title: 'Medical Record Updated',\r\n          message: 'Your medical record has been updated with new test results.',\r\n          type: 'record',\r\n          read: true,\r\n          createdAt: new Date(Date.now() - 7200000).toISOString()\r\n        },\r\n        {\r\n          id: 4,\r\n          title: 'System Maintenance',\r\n          message: 'Scheduled system maintenance will occur tonight from 2:00 AM to 4:00 AM.',\r\n          type: 'system',\r\n          read: true,\r\n          createdAt: new Date(Date.now() - 86400000).toISOString()\r\n        }\r\n      ];\r\n      \r\n      dispatch({\r\n        type: 'LOAD_NOTIFICATIONS_SUCCESS',\r\n        payload: mockNotifications\r\n      });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: 'LOAD_NOTIFICATIONS_ERROR',\r\n        payload: error.message\r\n      });\r\n    }\r\n  };\r\n\r\n  const markAsRead = async (notificationId) => {\r\n    try {\r\n      // Mock API call - no actual API call needed\r\n      console.log('Marking notification as read:', notificationId);\r\n      dispatch({\r\n        type: 'MARK_AS_READ',\r\n        payload: notificationId\r\n      });\r\n    } catch (error) {\r\n      console.error('Error marking notification as read:', error);\r\n    }\r\n  };\r\n\r\n  const markAllAsRead = async () => {\r\n    try {\r\n      // Mock API call - no actual API call needed\r\n      console.log('Marking all notifications as read');\r\n      dispatch({ type: 'MARK_ALL_AS_READ' });\r\n    } catch (error) {\r\n      console.error('Error marking all notifications as read:', error);\r\n    }\r\n  };\r\n\r\n  const addNotification = (notification) => {\r\n    dispatch({\r\n      type: 'ADD_NOTIFICATION',\r\n      payload: notification\r\n    });\r\n  };\r\n\r\n  const showToast = (message, type = 'info') => {\r\n    switch (type) {\r\n      case 'success':\r\n        toast.success(message);\r\n        break;\r\n      case 'error':\r\n        toast.error(message);\r\n        break;\r\n      case 'warning':\r\n        toast.warning(message);\r\n        break;\r\n      default:\r\n        toast.info(message);\r\n    }\r\n  };\r\n\r\n  const showSuccess = (message) => showToast(message, 'success');\r\n  const showError = (message) => showToast(message, 'error');\r\n  const showWarning = (message) => showToast(message, 'warning');\r\n  const showInfo = (message) => showToast(message, 'info');\r\n\r\n  const value = {\r\n    ...state,\r\n    loadNotifications,\r\n    markAsRead,\r\n    markAllAsRead,\r\n    addNotification,\r\n    showToast,\r\n    showSuccess,\r\n    showError,\r\n    showWarning,\r\n    showInfo\r\n  };\r\n\r\n  return (\r\n    <NotificationContext.Provider value={value}>\r\n      {children}\r\n    </NotificationContext.Provider>\r\n  );\r\n};\r\n\r\n/**\r\n * Notification Reducer\r\n * Handles notification state updates\r\n */\r\nconst notificationReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'SET_LOADING':\r\n      return { ...state, loading: action.payload };\r\n    case 'LOAD_NOTIFICATIONS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        notifications: action.payload,\r\n        unreadCount: action.payload.filter(n => !n.read).length,\r\n        loading: false,\r\n        error: null\r\n      };\r\n    case 'LOAD_NOTIFICATIONS_ERROR':\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: action.payload\r\n      };\r\n    case 'MARK_AS_READ':\r\n      return {\r\n        ...state,\r\n        notifications: state.notifications.map(n =>\r\n          n.id === action.payload ? { ...n, read: true } : n\r\n        ),\r\n        unreadCount: Math.max(0, state.unreadCount - 1)\r\n      };\r\n    case 'MARK_ALL_AS_READ':\r\n      return {\r\n        ...state,\r\n        notifications: state.notifications.map(n => ({ ...n, read: true })),\r\n        unreadCount: 0\r\n      };\r\n    case 'ADD_NOTIFICATION':\r\n      return {\r\n        ...state,\r\n        notifications: [action.payload, ...state.notifications],\r\n        unreadCount: state.unreadCount + 1\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n/**\r\n * Custom hook to use notification context\r\n */\r\nexport const useNotification = () => {\r\n  const context = useContext(NotificationContext);\r\n  if (!context) {\r\n    throw new Error('useNotification must be used within a NotificationProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}