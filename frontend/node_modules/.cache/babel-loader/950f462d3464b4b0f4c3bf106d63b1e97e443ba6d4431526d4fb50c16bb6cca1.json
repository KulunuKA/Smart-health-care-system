{"ast":null,"code":"import axios from'axios';import{API_BASE_URL,API_ENDPOINTS}from'../utils/constants';/**\r\n * Authentication Service\r\n * Handles all authentication-related API calls\r\n */class AuthService{constructor(){this.baseURL=API_BASE_URL;this.setupInterceptors();}/**\r\n   * Setup axios interceptors for request/response handling\r\n   */setupInterceptors(){// Request interceptor to add auth token\naxios.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers.Authorization=\"Bearer \".concat(token);}return config;},error=>{return Promise.reject(error);});// Response interceptor to handle auth errors\naxios.interceptors.response.use(response=>response,error=>{var _error$response;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){// Token expired or invalid\nlocalStorage.removeItem('token');localStorage.removeItem('user');window.location.href='/login';}return Promise.reject(error);});}/**\r\n   * Login user\r\n   * @param {object} credentials - Login credentials\r\n   * @returns {Promise<object>} - Login response\r\n   */async login(credentials){try{const response=await axios.post(\"\".concat(this.baseURL).concat(API_ENDPOINTS.AUTH.LOGIN),credentials);return{user:response.data.user,token:response.data.token,role:response.data.user.role};}catch(error){var _error$response2,_error$response2$data;throw new Error(((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||'Login failed');}}/**\r\n   * Logout user\r\n   * @returns {Promise<void>}\r\n   */async logout(){try{await axios.post(\"\".concat(this.baseURL).concat(API_ENDPOINTS.AUTH.LOGOUT));}catch(error){console.error('Logout error:',error);}}/**\r\n   * Refresh authentication token\r\n   * @returns {Promise<object>} - New token\r\n   */async refreshToken(){try{const response=await axios.post(\"\".concat(this.baseURL).concat(API_ENDPOINTS.AUTH.REFRESH));return{token:response.data.token};}catch(error){throw new Error('Token refresh failed');}}/**\r\n   * Get current user profile\r\n   * @returns {Promise<object>} - User profile\r\n   */async getCurrentUser(){try{const response=await axios.get(\"\".concat(this.baseURL,\"/auth/me\"));return response.data;}catch(error){throw new Error('Failed to get user profile');}}/**\r\n   * Update user profile\r\n   * @param {object} userData - Updated user data\r\n   * @returns {Promise<object>} - Updated user profile\r\n   */async updateProfile(userData){try{const response=await axios.put(\"\".concat(this.baseURL,\"/auth/profile\"),userData);return response.data;}catch(error){var _error$response3,_error$response3$data;throw new Error(((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.message)||'Profile update failed');}}/**\r\n   * Change password\r\n   * @param {object} passwordData - Password change data\r\n   * @returns {Promise<void>}\r\n   */async changePassword(passwordData){try{await axios.put(\"\".concat(this.baseURL,\"/auth/change-password\"),passwordData);}catch(error){var _error$response4,_error$response4$data;throw new Error(((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.message)||'Password change failed');}}/**\r\n   * Request password reset\r\n   * @param {string} email - User email\r\n   * @returns {Promise<void>}\r\n   */async requestPasswordReset(email){try{await axios.post(\"\".concat(this.baseURL,\"/auth/forgot-password\"),{email});}catch(error){var _error$response5,_error$response5$data;throw new Error(((_error$response5=error.response)===null||_error$response5===void 0?void 0:(_error$response5$data=_error$response5.data)===null||_error$response5$data===void 0?void 0:_error$response5$data.message)||'Password reset request failed');}}/**\r\n   * Reset password with token\r\n   * @param {object} resetData - Password reset data\r\n   * @returns {Promise<void>}\r\n   */async resetPassword(resetData){try{await axios.post(\"\".concat(this.baseURL,\"/auth/reset-password\"),resetData);}catch(error){var _error$response6,_error$response6$data;throw new Error(((_error$response6=error.response)===null||_error$response6===void 0?void 0:(_error$response6$data=_error$response6.data)===null||_error$response6$data===void 0?void 0:_error$response6$data.message)||'Password reset failed');}}/**\r\n   * Verify email address\r\n   * @param {string} token - Verification token\r\n   * @returns {Promise<void>}\r\n   */async verifyEmail(token){try{await axios.post(\"\".concat(this.baseURL,\"/auth/verify-email\"),{token});}catch(error){var _error$response7,_error$response7$data;throw new Error(((_error$response7=error.response)===null||_error$response7===void 0?void 0:(_error$response7$data=_error$response7.data)===null||_error$response7$data===void 0?void 0:_error$response7$data.message)||'Email verification failed');}}/**\r\n   * Check if user is authenticated\r\n   * @returns {boolean} - Authentication status\r\n   */isAuthenticated(){const token=localStorage.getItem('token');return!!token;}/**\r\n   * Get stored token\r\n   * @returns {string|null} - Stored token\r\n   */getToken(){return localStorage.getItem('token');}/**\r\n   * Get stored user data\r\n   * @returns {object|null} - Stored user data\r\n   */getUser(){const user=localStorage.getItem('user');return user?JSON.parse(user):null;}}export const authService=new AuthService();","map":{"version":3,"names":["axios","API_BASE_URL","API_ENDPOINTS","AuthService","constructor","baseURL","setupInterceptors","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","concat","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","login","credentials","post","AUTH","LOGIN","user","data","role","_error$response2","_error$response2$data","Error","message","logout","LOGOUT","console","refreshToken","REFRESH","getCurrentUser","get","updateProfile","userData","put","_error$response3","_error$response3$data","changePassword","passwordData","_error$response4","_error$response4$data","requestPasswordReset","email","_error$response5","_error$response5$data","resetPassword","resetData","_error$response6","_error$response6$data","verifyEmail","_error$response7","_error$response7$data","isAuthenticated","getToken","getUser","JSON","parse","authService"],"sources":["E:/Academic SLIIT/Y3S1 Documents/CSSE/Assignment 2/Smart-health-care-system/frontend/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\r\nimport { API_BASE_URL, API_ENDPOINTS } from '../utils/constants';\r\n\r\n/**\r\n * Authentication Service\r\n * Handles all authentication-related API calls\r\n */\r\nclass AuthService {\r\n  constructor() {\r\n    this.baseURL = API_BASE_URL;\r\n    this.setupInterceptors();\r\n  }\r\n\r\n  /**\r\n   * Setup axios interceptors for request/response handling\r\n   */\r\n  setupInterceptors() {\r\n    // Request interceptor to add auth token\r\n    axios.interceptors.request.use(\r\n      (config) => {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n          config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n      },\r\n      (error) => {\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n\r\n    // Response interceptor to handle auth errors\r\n    axios.interceptors.response.use(\r\n      (response) => response,\r\n      (error) => {\r\n        if (error.response?.status === 401) {\r\n          // Token expired or invalid\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('user');\r\n          window.location.href = '/login';\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Login user\r\n   * @param {object} credentials - Login credentials\r\n   * @returns {Promise<object>} - Login response\r\n   */\r\n  async login(credentials) {\r\n    try {\r\n      const response = await axios.post(\r\n        `${this.baseURL}${API_ENDPOINTS.AUTH.LOGIN}`,\r\n        credentials\r\n      );\r\n      \r\n      return {\r\n        user: response.data.user,\r\n        token: response.data.token,\r\n        role: response.data.user.role\r\n      };\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Login failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Logout user\r\n   * @returns {Promise<void>}\r\n   */\r\n  async logout() {\r\n    try {\r\n      await axios.post(`${this.baseURL}${API_ENDPOINTS.AUTH.LOGOUT}`);\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Refresh authentication token\r\n   * @returns {Promise<object>} - New token\r\n   */\r\n  async refreshToken() {\r\n    try {\r\n      const response = await axios.post(\r\n        `${this.baseURL}${API_ENDPOINTS.AUTH.REFRESH}`\r\n      );\r\n      \r\n      return {\r\n        token: response.data.token\r\n      };\r\n    } catch (error) {\r\n      throw new Error('Token refresh failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current user profile\r\n   * @returns {Promise<object>} - User profile\r\n   */\r\n  async getCurrentUser() {\r\n    try {\r\n      const response = await axios.get(`${this.baseURL}/auth/me`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error('Failed to get user profile');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update user profile\r\n   * @param {object} userData - Updated user data\r\n   * @returns {Promise<object>} - Updated user profile\r\n   */\r\n  async updateProfile(userData) {\r\n    try {\r\n      const response = await axios.put(\r\n        `${this.baseURL}/auth/profile`,\r\n        userData\r\n      );\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Profile update failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Change password\r\n   * @param {object} passwordData - Password change data\r\n   * @returns {Promise<void>}\r\n   */\r\n  async changePassword(passwordData) {\r\n    try {\r\n      await axios.put(\r\n        `${this.baseURL}/auth/change-password`,\r\n        passwordData\r\n      );\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Password change failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Request password reset\r\n   * @param {string} email - User email\r\n   * @returns {Promise<void>}\r\n   */\r\n  async requestPasswordReset(email) {\r\n    try {\r\n      await axios.post(\r\n        `${this.baseURL}/auth/forgot-password`,\r\n        { email }\r\n      );\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Password reset request failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reset password with token\r\n   * @param {object} resetData - Password reset data\r\n   * @returns {Promise<void>}\r\n   */\r\n  async resetPassword(resetData) {\r\n    try {\r\n      await axios.post(\r\n        `${this.baseURL}/auth/reset-password`,\r\n        resetData\r\n      );\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Password reset failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verify email address\r\n   * @param {string} token - Verification token\r\n   * @returns {Promise<void>}\r\n   */\r\n  async verifyEmail(token) {\r\n    try {\r\n      await axios.post(\r\n        `${this.baseURL}/auth/verify-email`,\r\n        { token }\r\n      );\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Email verification failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if user is authenticated\r\n   * @returns {boolean} - Authentication status\r\n   */\r\n  isAuthenticated() {\r\n    const token = localStorage.getItem('token');\r\n    return !!token;\r\n  }\r\n\r\n  /**\r\n   * Get stored token\r\n   * @returns {string|null} - Stored token\r\n   */\r\n  getToken() {\r\n    return localStorage.getItem('token');\r\n  }\r\n\r\n  /**\r\n   * Get stored user data\r\n   * @returns {object|null} - Stored user data\r\n   */\r\n  getUser() {\r\n    const user = localStorage.getItem('user');\r\n    return user ? JSON.parse(user) : null;\r\n  }\r\n}\r\n\r\nexport const authService = new AuthService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}