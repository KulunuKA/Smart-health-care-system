{"ast":null,"code":"import axios from 'axios';\nimport { API_BASE_URL, API_ENDPOINTS } from '../utils/constants';\n\n/**\r\n * Authentication Service\r\n * Handles all authentication-related API calls\r\n */\nclass AuthService {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n    this.setupInterceptors();\n  }\n\n  /**\r\n   * Setup axios interceptors for request/response handling\r\n   */\n  setupInterceptors() {\n    // Request interceptor to add auth token\n    axios.interceptors.request.use(config => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    }, error => {\n      return Promise.reject(error);\n    });\n\n    // Response interceptor to handle auth errors\n    axios.interceptors.response.use(response => response, error => {\n      var _error$response;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        // Token expired or invalid\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        window.location.href = '/login';\n      }\n      return Promise.reject(error);\n    });\n  }\n\n  /**\r\n   * Login user\r\n   * @param {object} credentials - Login credentials\r\n   * @returns {Promise<object>} - Login response\r\n   */\n  async login(credentials) {\n    try {\n      const response = await axios.post(`${this.baseURL}${API_ENDPOINTS.AUTH.LOGIN}`, credentials);\n      return {\n        user: response.data.user,\n        token: response.data.token,\n        role: response.data.user.role\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Login failed');\n    }\n  }\n\n  /**\r\n   * Logout user\r\n   * @returns {Promise<void>}\r\n   */\n  async logout() {\n    try {\n      await axios.post(`${this.baseURL}${API_ENDPOINTS.AUTH.LOGOUT}`);\n    } catch (error) {\n      console.error('Logout error:', error);\n    }\n  }\n\n  /**\r\n   * Refresh authentication token\r\n   * @returns {Promise<object>} - New token\r\n   */\n  async refreshToken() {\n    try {\n      const response = await axios.post(`${this.baseURL}${API_ENDPOINTS.AUTH.REFRESH}`);\n      return {\n        token: response.data.token\n      };\n    } catch (error) {\n      throw new Error('Token refresh failed');\n    }\n  }\n\n  /**\r\n   * Get current user profile\r\n   * @returns {Promise<object>} - User profile\r\n   */\n  async getCurrentUser() {\n    try {\n      const response = await axios.get(`${this.baseURL}/auth/me`);\n      return response.data;\n    } catch (error) {\n      throw new Error('Failed to get user profile');\n    }\n  }\n\n  /**\r\n   * Update user profile\r\n   * @param {object} userData - Updated user data\r\n   * @returns {Promise<object>} - Updated user profile\r\n   */\n  async updateProfile(userData) {\n    try {\n      const response = await axios.put(`${this.baseURL}/auth/profile`, userData);\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Profile update failed');\n    }\n  }\n\n  /**\r\n   * Change password\r\n   * @param {object} passwordData - Password change data\r\n   * @returns {Promise<void>}\r\n   */\n  async changePassword(passwordData) {\n    try {\n      await axios.put(`${this.baseURL}/auth/change-password`, passwordData);\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Password change failed');\n    }\n  }\n\n  /**\r\n   * Request password reset\r\n   * @param {string} email - User email\r\n   * @returns {Promise<void>}\r\n   */\n  async requestPasswordReset(email) {\n    try {\n      await axios.post(`${this.baseURL}/auth/forgot-password`, {\n        email\n      });\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Password reset request failed');\n    }\n  }\n\n  /**\r\n   * Reset password with token\r\n   * @param {object} resetData - Password reset data\r\n   * @returns {Promise<void>}\r\n   */\n  async resetPassword(resetData) {\n    try {\n      await axios.post(`${this.baseURL}/auth/reset-password`, resetData);\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      throw new Error(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Password reset failed');\n    }\n  }\n\n  /**\r\n   * Verify email address\r\n   * @param {string} token - Verification token\r\n   * @returns {Promise<void>}\r\n   */\n  async verifyEmail(token) {\n    try {\n      await axios.post(`${this.baseURL}/auth/verify-email`, {\n        token\n      });\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      throw new Error(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Email verification failed');\n    }\n  }\n\n  /**\r\n   * Check if user is authenticated\r\n   * @returns {boolean} - Authentication status\r\n   */\n  isAuthenticated() {\n    const token = localStorage.getItem('token');\n    return !!token;\n  }\n\n  /**\r\n   * Get stored token\r\n   * @returns {string|null} - Stored token\r\n   */\n  getToken() {\n    return localStorage.getItem('token');\n  }\n\n  /**\r\n   * Get stored user data\r\n   * @returns {object|null} - Stored user data\r\n   */\n  getUser() {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  }\n}\nexport const authService = new AuthService();","map":{"version":3,"names":["axios","API_BASE_URL","API_ENDPOINTS","AuthService","constructor","baseURL","setupInterceptors","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","login","credentials","post","AUTH","LOGIN","user","data","role","_error$response2","_error$response2$data","Error","message","logout","LOGOUT","console","refreshToken","REFRESH","getCurrentUser","get","updateProfile","userData","put","_error$response3","_error$response3$data","changePassword","passwordData","_error$response4","_error$response4$data","requestPasswordReset","email","_error$response5","_error$response5$data","resetPassword","resetData","_error$response6","_error$response6$data","verifyEmail","_error$response7","_error$response7$data","isAuthenticated","getToken","getUser","JSON","parse","authService"],"sources":["E:/Academic SLIIT/Y3S1 Documents/CSSE/Assignment 2/Smart-health-care-system/frontend/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\r\nimport { API_BASE_URL, API_ENDPOINTS } from '../utils/constants';\r\n\r\n/**\r\n * Authentication Service\r\n * Handles all authentication-related API calls\r\n */\r\nclass AuthService {\r\n  constructor() {\r\n    this.baseURL = API_BASE_URL;\r\n    this.setupInterceptors();\r\n  }\r\n\r\n  /**\r\n   * Setup axios interceptors for request/response handling\r\n   */\r\n  setupInterceptors() {\r\n    // Request interceptor to add auth token\r\n    axios.interceptors.request.use(\r\n      (config) => {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n          config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n      },\r\n      (error) => {\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n\r\n    // Response interceptor to handle auth errors\r\n    axios.interceptors.response.use(\r\n      (response) => response,\r\n      (error) => {\r\n        if (error.response?.status === 401) {\r\n          // Token expired or invalid\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('user');\r\n          window.location.href = '/login';\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Login user\r\n   * @param {object} credentials - Login credentials\r\n   * @returns {Promise<object>} - Login response\r\n   */\r\n  async login(credentials) {\r\n    try {\r\n      const response = await axios.post(\r\n        `${this.baseURL}${API_ENDPOINTS.AUTH.LOGIN}`,\r\n        credentials\r\n      );\r\n      \r\n      return {\r\n        user: response.data.user,\r\n        token: response.data.token,\r\n        role: response.data.user.role\r\n      };\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Login failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Logout user\r\n   * @returns {Promise<void>}\r\n   */\r\n  async logout() {\r\n    try {\r\n      await axios.post(`${this.baseURL}${API_ENDPOINTS.AUTH.LOGOUT}`);\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Refresh authentication token\r\n   * @returns {Promise<object>} - New token\r\n   */\r\n  async refreshToken() {\r\n    try {\r\n      const response = await axios.post(\r\n        `${this.baseURL}${API_ENDPOINTS.AUTH.REFRESH}`\r\n      );\r\n      \r\n      return {\r\n        token: response.data.token\r\n      };\r\n    } catch (error) {\r\n      throw new Error('Token refresh failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current user profile\r\n   * @returns {Promise<object>} - User profile\r\n   */\r\n  async getCurrentUser() {\r\n    try {\r\n      const response = await axios.get(`${this.baseURL}/auth/me`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error('Failed to get user profile');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update user profile\r\n   * @param {object} userData - Updated user data\r\n   * @returns {Promise<object>} - Updated user profile\r\n   */\r\n  async updateProfile(userData) {\r\n    try {\r\n      const response = await axios.put(\r\n        `${this.baseURL}/auth/profile`,\r\n        userData\r\n      );\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Profile update failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Change password\r\n   * @param {object} passwordData - Password change data\r\n   * @returns {Promise<void>}\r\n   */\r\n  async changePassword(passwordData) {\r\n    try {\r\n      await axios.put(\r\n        `${this.baseURL}/auth/change-password`,\r\n        passwordData\r\n      );\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Password change failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Request password reset\r\n   * @param {string} email - User email\r\n   * @returns {Promise<void>}\r\n   */\r\n  async requestPasswordReset(email) {\r\n    try {\r\n      await axios.post(\r\n        `${this.baseURL}/auth/forgot-password`,\r\n        { email }\r\n      );\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Password reset request failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reset password with token\r\n   * @param {object} resetData - Password reset data\r\n   * @returns {Promise<void>}\r\n   */\r\n  async resetPassword(resetData) {\r\n    try {\r\n      await axios.post(\r\n        `${this.baseURL}/auth/reset-password`,\r\n        resetData\r\n      );\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Password reset failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verify email address\r\n   * @param {string} token - Verification token\r\n   * @returns {Promise<void>}\r\n   */\r\n  async verifyEmail(token) {\r\n    try {\r\n      await axios.post(\r\n        `${this.baseURL}/auth/verify-email`,\r\n        { token }\r\n      );\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Email verification failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if user is authenticated\r\n   * @returns {boolean} - Authentication status\r\n   */\r\n  isAuthenticated() {\r\n    const token = localStorage.getItem('token');\r\n    return !!token;\r\n  }\r\n\r\n  /**\r\n   * Get stored token\r\n   * @returns {string|null} - Stored token\r\n   */\r\n  getToken() {\r\n    return localStorage.getItem('token');\r\n  }\r\n\r\n  /**\r\n   * Get stored user data\r\n   * @returns {object|null} - Stored user data\r\n   */\r\n  getUser() {\r\n    const user = localStorage.getItem('user');\r\n    return user ? JSON.parse(user) : null;\r\n  }\r\n}\r\n\r\nexport const authService = new AuthService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}