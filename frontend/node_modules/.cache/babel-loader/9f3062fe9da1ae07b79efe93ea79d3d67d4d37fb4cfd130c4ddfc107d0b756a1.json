{"ast":null,"code":"import { VALIDATION_RULES } from './constants';\n\n/**\r\n * Validation utility functions\r\n * Provides form validation helpers for the Smart Healthcare System\r\n */\n\n/**\r\n * Validates email format\r\n * @param {string} email - Email to validate\r\n * @returns {boolean} - True if valid email format\r\n */\nexport const isValidEmail = email => {\n  return VALIDATION_RULES.EMAIL_REGEX.test(email);\n};\n\n/**\r\n * Validates password strength\r\n * @param {string} password - Password to validate\r\n * @returns {object} - Validation result with isValid and message\r\n */\nexport const validatePassword = password => {\n  if (!password) {\n    return {\n      isValid: false,\n      message: 'Password is required'\n    };\n  }\n  if (password.length < VALIDATION_RULES.PASSWORD_MIN_LENGTH) {\n    return {\n      isValid: false,\n      message: `Password must be at least ${VALIDATION_RULES.PASSWORD_MIN_LENGTH} characters long`\n    };\n  }\n  return {\n    isValid: true,\n    message: 'Password is valid'\n  };\n};\n\n/**\r\n * Validates phone number format\r\n * @param {string} phone - Phone number to validate\r\n * @returns {boolean} - True if valid phone format\r\n */\nexport const isValidPhone = phone => {\n  return VALIDATION_RULES.PHONE_REGEX.test(phone);\n};\n\n/**\r\n * Validates health card number format\r\n * @param {string} healthCard - Health card number to validate\r\n * @returns {boolean} - True if valid health card format\r\n */\nexport const isValidHealthCard = healthCard => {\n  return VALIDATION_RULES.HEALTH_CARD_REGEX.test(healthCard);\n};\n\n/**\r\n * Validates required field\r\n * @param {any} value - Value to validate\r\n * @param {string} fieldName - Name of the field for error message\r\n * @returns {object} - Validation result\r\n */\nexport const validateRequired = (value, fieldName) => {\n  if (!value || typeof value === 'string' && value.trim() === '') {\n    return {\n      isValid: false,\n      message: `${fieldName} is required`\n    };\n  }\n  return {\n    isValid: true,\n    message: ''\n  };\n};\n\n/**\r\n * Validates date\r\n * @param {string|Date} date - Date to validate\r\n * @returns {object} - Validation result\r\n */\nexport const validateDate = date => {\n  if (!date) {\n    return {\n      isValid: false,\n      message: 'Date is required'\n    };\n  }\n  const dateObj = new Date(date);\n  if (isNaN(dateObj.getTime())) {\n    return {\n      isValid: false,\n      message: 'Invalid date format'\n    };\n  }\n  return {\n    isValid: true,\n    message: ''\n  };\n};\n\n/**\r\n * Validates future date\r\n * @param {string|Date} date - Date to validate\r\n * @returns {object} - Validation result\r\n */\nexport const validateFutureDate = date => {\n  const dateValidation = validateDate(date);\n  if (!dateValidation.isValid) {\n    return dateValidation;\n  }\n  const dateObj = new Date(date);\n  const now = new Date();\n  if (dateObj <= now) {\n    return {\n      isValid: false,\n      message: 'Date must be in the future'\n    };\n  }\n  return {\n    isValid: true,\n    message: ''\n  };\n};\n\n/**\r\n * Validates appointment form\r\n * @param {object} formData - Form data to validate\r\n * @returns {object} - Validation result with errors\r\n */\nexport const validateAppointmentForm = formData => {\n  const errors = {};\n\n  // Validate doctor selection\n  if (!formData.doctorId) {\n    errors.doctorId = 'Please select a doctor';\n  }\n\n  // Validate date\n  const dateValidation = validateFutureDate(formData.date);\n  if (!dateValidation.isValid) {\n    errors.date = dateValidation.message;\n  }\n\n  // Validate time\n  if (!formData.time) {\n    errors.time = 'Please select a time slot';\n  }\n\n  // Validate reason\n  const reasonValidation = validateRequired(formData.reason, 'Reason for appointment');\n  if (!reasonValidation.isValid) {\n    errors.reason = reasonValidation.message;\n  }\n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors\n  };\n};\n\n/**\r\n * Validates patient form\r\n * @param {object} formData - Form data to validate\r\n * @returns {object} - Validation result with errors\r\n */\nexport const validatePatientForm = formData => {\n  const errors = {};\n\n  // Validate name\n  const nameValidation = validateRequired(formData.name, 'Name');\n  if (!nameValidation.isValid) {\n    errors.name = nameValidation.message;\n  }\n\n  // Validate email\n  if (formData.email && !isValidEmail(formData.email)) {\n    errors.email = 'Invalid email format';\n  }\n\n  // Validate phone\n  if (formData.phone && !isValidPhone(formData.phone)) {\n    errors.phone = 'Invalid phone number format';\n  }\n\n  // Validate health card\n  if (formData.healthCardNumber && !isValidHealthCard(formData.healthCardNumber)) {\n    errors.healthCardNumber = 'Invalid health card number format';\n  }\n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors\n  };\n};\n\n/**\r\n * Validates payment form\r\n * @param {object} formData - Form data to validate\r\n * @returns {object} - Validation result with errors\r\n */\nexport const validatePaymentForm = formData => {\n  const errors = {};\n\n  // Validate payment method\n  if (!formData.paymentMethod) {\n    errors.paymentMethod = 'Please select a payment method';\n  }\n\n  // Validate amount\n  if (!formData.amount || formData.amount <= 0) {\n    errors.amount = 'Amount must be greater than 0';\n  }\n\n  // Validate card details if card payment\n  if (formData.paymentMethod === 'card') {\n    if (!formData.cardNumber) {\n      errors.cardNumber = 'Card number is required';\n    }\n    if (!formData.expiryDate) {\n      errors.expiryDate = 'Expiry date is required';\n    }\n    if (!formData.cvv) {\n      errors.cvv = 'CVV is required';\n    }\n  }\n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors\n  };\n};\n\n/**\r\n * Validates login form\r\n * @param {object} formData - Form data to validate\r\n * @returns {object} - Validation result with errors\r\n */\nexport const validateLoginForm = formData => {\n  const errors = {};\n\n  // Validate email\n  if (!formData.email) {\n    errors.email = 'Email is required';\n  } else if (!isValidEmail(formData.email)) {\n    errors.email = 'Invalid email format';\n  }\n\n  // Validate password\n  const passwordValidation = validatePassword(formData.password);\n  if (!passwordValidation.isValid) {\n    errors.password = passwordValidation.message;\n  }\n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors\n  };\n};","map":{"version":3,"names":["VALIDATION_RULES","isValidEmail","email","EMAIL_REGEX","test","validatePassword","password","isValid","message","length","PASSWORD_MIN_LENGTH","isValidPhone","phone","PHONE_REGEX","isValidHealthCard","healthCard","HEALTH_CARD_REGEX","validateRequired","value","fieldName","trim","validateDate","date","dateObj","Date","isNaN","getTime","validateFutureDate","dateValidation","now","validateAppointmentForm","formData","errors","doctorId","time","reasonValidation","reason","Object","keys","validatePatientForm","nameValidation","name","healthCardNumber","validatePaymentForm","paymentMethod","amount","cardNumber","expiryDate","cvv","validateLoginForm","passwordValidation"],"sources":["E:/Academic SLIIT/Y3S1 Documents/CSSE/Assignment 2/Smart-health-care-system/frontend/src/utils/validators.js"],"sourcesContent":["import { VALIDATION_RULES } from './constants';\r\n\r\n/**\r\n * Validation utility functions\r\n * Provides form validation helpers for the Smart Healthcare System\r\n */\r\n\r\n/**\r\n * Validates email format\r\n * @param {string} email - Email to validate\r\n * @returns {boolean} - True if valid email format\r\n */\r\nexport const isValidEmail = (email) => {\r\n  return VALIDATION_RULES.EMAIL_REGEX.test(email);\r\n};\r\n\r\n/**\r\n * Validates password strength\r\n * @param {string} password - Password to validate\r\n * @returns {object} - Validation result with isValid and message\r\n */\r\nexport const validatePassword = (password) => {\r\n  if (!password) {\r\n    return { isValid: false, message: 'Password is required' };\r\n  }\r\n  \r\n  if (password.length < VALIDATION_RULES.PASSWORD_MIN_LENGTH) {\r\n    return { \r\n      isValid: false, \r\n      message: `Password must be at least ${VALIDATION_RULES.PASSWORD_MIN_LENGTH} characters long` \r\n    };\r\n  }\r\n  \r\n  return { isValid: true, message: 'Password is valid' };\r\n};\r\n\r\n/**\r\n * Validates phone number format\r\n * @param {string} phone - Phone number to validate\r\n * @returns {boolean} - True if valid phone format\r\n */\r\nexport const isValidPhone = (phone) => {\r\n  return VALIDATION_RULES.PHONE_REGEX.test(phone);\r\n};\r\n\r\n/**\r\n * Validates health card number format\r\n * @param {string} healthCard - Health card number to validate\r\n * @returns {boolean} - True if valid health card format\r\n */\r\nexport const isValidHealthCard = (healthCard) => {\r\n  return VALIDATION_RULES.HEALTH_CARD_REGEX.test(healthCard);\r\n};\r\n\r\n/**\r\n * Validates required field\r\n * @param {any} value - Value to validate\r\n * @param {string} fieldName - Name of the field for error message\r\n * @returns {object} - Validation result\r\n */\r\nexport const validateRequired = (value, fieldName) => {\r\n  if (!value || (typeof value === 'string' && value.trim() === '')) {\r\n    return { isValid: false, message: `${fieldName} is required` };\r\n  }\r\n  return { isValid: true, message: '' };\r\n};\r\n\r\n/**\r\n * Validates date\r\n * @param {string|Date} date - Date to validate\r\n * @returns {object} - Validation result\r\n */\r\nexport const validateDate = (date) => {\r\n  if (!date) {\r\n    return { isValid: false, message: 'Date is required' };\r\n  }\r\n  \r\n  const dateObj = new Date(date);\r\n  if (isNaN(dateObj.getTime())) {\r\n    return { isValid: false, message: 'Invalid date format' };\r\n  }\r\n  \r\n  return { isValid: true, message: '' };\r\n};\r\n\r\n/**\r\n * Validates future date\r\n * @param {string|Date} date - Date to validate\r\n * @returns {object} - Validation result\r\n */\r\nexport const validateFutureDate = (date) => {\r\n  const dateValidation = validateDate(date);\r\n  if (!dateValidation.isValid) {\r\n    return dateValidation;\r\n  }\r\n  \r\n  const dateObj = new Date(date);\r\n  const now = new Date();\r\n  \r\n  if (dateObj <= now) {\r\n    return { isValid: false, message: 'Date must be in the future' };\r\n  }\r\n  \r\n  return { isValid: true, message: '' };\r\n};\r\n\r\n/**\r\n * Validates appointment form\r\n * @param {object} formData - Form data to validate\r\n * @returns {object} - Validation result with errors\r\n */\r\nexport const validateAppointmentForm = (formData) => {\r\n  const errors = {};\r\n  \r\n  // Validate doctor selection\r\n  if (!formData.doctorId) {\r\n    errors.doctorId = 'Please select a doctor';\r\n  }\r\n  \r\n  // Validate date\r\n  const dateValidation = validateFutureDate(formData.date);\r\n  if (!dateValidation.isValid) {\r\n    errors.date = dateValidation.message;\r\n  }\r\n  \r\n  // Validate time\r\n  if (!formData.time) {\r\n    errors.time = 'Please select a time slot';\r\n  }\r\n  \r\n  // Validate reason\r\n  const reasonValidation = validateRequired(formData.reason, 'Reason for appointment');\r\n  if (!reasonValidation.isValid) {\r\n    errors.reason = reasonValidation.message;\r\n  }\r\n  \r\n  return {\r\n    isValid: Object.keys(errors).length === 0,\r\n    errors\r\n  };\r\n};\r\n\r\n/**\r\n * Validates patient form\r\n * @param {object} formData - Form data to validate\r\n * @returns {object} - Validation result with errors\r\n */\r\nexport const validatePatientForm = (formData) => {\r\n  const errors = {};\r\n  \r\n  // Validate name\r\n  const nameValidation = validateRequired(formData.name, 'Name');\r\n  if (!nameValidation.isValid) {\r\n    errors.name = nameValidation.message;\r\n  }\r\n  \r\n  // Validate email\r\n  if (formData.email && !isValidEmail(formData.email)) {\r\n    errors.email = 'Invalid email format';\r\n  }\r\n  \r\n  // Validate phone\r\n  if (formData.phone && !isValidPhone(formData.phone)) {\r\n    errors.phone = 'Invalid phone number format';\r\n  }\r\n  \r\n  // Validate health card\r\n  if (formData.healthCardNumber && !isValidHealthCard(formData.healthCardNumber)) {\r\n    errors.healthCardNumber = 'Invalid health card number format';\r\n  }\r\n  \r\n  return {\r\n    isValid: Object.keys(errors).length === 0,\r\n    errors\r\n  };\r\n};\r\n\r\n/**\r\n * Validates payment form\r\n * @param {object} formData - Form data to validate\r\n * @returns {object} - Validation result with errors\r\n */\r\nexport const validatePaymentForm = (formData) => {\r\n  const errors = {};\r\n  \r\n  // Validate payment method\r\n  if (!formData.paymentMethod) {\r\n    errors.paymentMethod = 'Please select a payment method';\r\n  }\r\n  \r\n  // Validate amount\r\n  if (!formData.amount || formData.amount <= 0) {\r\n    errors.amount = 'Amount must be greater than 0';\r\n  }\r\n  \r\n  // Validate card details if card payment\r\n  if (formData.paymentMethod === 'card') {\r\n    if (!formData.cardNumber) {\r\n      errors.cardNumber = 'Card number is required';\r\n    }\r\n    if (!formData.expiryDate) {\r\n      errors.expiryDate = 'Expiry date is required';\r\n    }\r\n    if (!formData.cvv) {\r\n      errors.cvv = 'CVV is required';\r\n    }\r\n  }\r\n  \r\n  return {\r\n    isValid: Object.keys(errors).length === 0,\r\n    errors\r\n  };\r\n};\r\n\r\n/**\r\n * Validates login form\r\n * @param {object} formData - Form data to validate\r\n * @returns {object} - Validation result with errors\r\n */\r\nexport const validateLoginForm = (formData) => {\r\n  const errors = {};\r\n  \r\n  // Validate email\r\n  if (!formData.email) {\r\n    errors.email = 'Email is required';\r\n  } else if (!isValidEmail(formData.email)) {\r\n    errors.email = 'Invalid email format';\r\n  }\r\n  \r\n  // Validate password\r\n  const passwordValidation = validatePassword(formData.password);\r\n  if (!passwordValidation.isValid) {\r\n    errors.password = passwordValidation.message;\r\n  }\r\n  \r\n  return {\r\n    isValid: Object.keys(errors).length === 0,\r\n    errors\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}