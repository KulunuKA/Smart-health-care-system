{"ast":null,"code":"import _objectSpread from\"E:/Academic SLIIT/Y3S1 Documents/CSSE/Assignment 2/Smart-health-care-system/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useReducer,useEffect}from'react';import{notificationService}from'../services/notificationService';import{toast}from'react-toastify';import{jsx as _jsx}from\"react/jsx-runtime\";const NotificationContext=/*#__PURE__*/createContext();/**\r\n * Notification Context Provider\r\n * Manages notification state and provides notification methods\r\n */export const NotificationProvider=_ref=>{let{children}=_ref;const[state,dispatch]=useReducer(notificationReducer,{notifications:[],unreadCount:0,loading:false,error:null});useEffect(()=>{// Load notifications if user is authenticated\nconst token=localStorage.getItem('token');if(token){loadNotifications();}},[]);const loadNotifications=async()=>{try{dispatch({type:'SET_LOADING',payload:true});const notifications=await notificationService.getNotifications();dispatch({type:'LOAD_NOTIFICATIONS_SUCCESS',payload:notifications});}catch(error){dispatch({type:'LOAD_NOTIFICATIONS_ERROR',payload:error.message});}};const markAsRead=async notificationId=>{try{await notificationService.markAsRead(notificationId);dispatch({type:'MARK_AS_READ',payload:notificationId});}catch(error){console.error('Error marking notification as read:',error);}};const markAllAsRead=async()=>{try{await notificationService.markAllAsRead();dispatch({type:'MARK_ALL_AS_READ'});}catch(error){console.error('Error marking all notifications as read:',error);}};const addNotification=notification=>{dispatch({type:'ADD_NOTIFICATION',payload:notification});};const showToast=function(message){let type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'info';switch(type){case'success':toast.success(message);break;case'error':toast.error(message);break;case'warning':toast.warning(message);break;default:toast.info(message);}};const showSuccess=message=>showToast(message,'success');const showError=message=>showToast(message,'error');const showWarning=message=>showToast(message,'warning');const showInfo=message=>showToast(message,'info');const value=_objectSpread(_objectSpread({},state),{},{loadNotifications,markAsRead,markAllAsRead,addNotification,showToast,showSuccess,showError,showWarning,showInfo});return/*#__PURE__*/_jsx(NotificationContext.Provider,{value:value,children:children});};/**\r\n * Notification Reducer\r\n * Handles notification state updates\r\n */const notificationReducer=(state,action)=>{switch(action.type){case'SET_LOADING':return _objectSpread(_objectSpread({},state),{},{loading:action.payload});case'LOAD_NOTIFICATIONS_SUCCESS':return _objectSpread(_objectSpread({},state),{},{notifications:action.payload,unreadCount:action.payload.filter(n=>!n.read).length,loading:false,error:null});case'LOAD_NOTIFICATIONS_ERROR':return _objectSpread(_objectSpread({},state),{},{loading:false,error:action.payload});case'MARK_AS_READ':return _objectSpread(_objectSpread({},state),{},{notifications:state.notifications.map(n=>n.id===action.payload?_objectSpread(_objectSpread({},n),{},{read:true}):n),unreadCount:Math.max(0,state.unreadCount-1)});case'MARK_ALL_AS_READ':return _objectSpread(_objectSpread({},state),{},{notifications:state.notifications.map(n=>_objectSpread(_objectSpread({},n),{},{read:true})),unreadCount:0});case'ADD_NOTIFICATION':return _objectSpread(_objectSpread({},state),{},{notifications:[action.payload,...state.notifications],unreadCount:state.unreadCount+1});default:return state;}};/**\r\n * Custom hook to use notification context\r\n */export const useNotification=()=>{const context=useContext(NotificationContext);if(!context){throw new Error('useNotification must be used within a NotificationProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","notificationService","toast","jsx","_jsx","NotificationContext","NotificationProvider","_ref","children","state","dispatch","notificationReducer","notifications","unreadCount","loading","error","token","localStorage","getItem","loadNotifications","type","payload","getNotifications","message","markAsRead","notificationId","console","markAllAsRead","addNotification","notification","showToast","arguments","length","undefined","success","warning","info","showSuccess","showError","showWarning","showInfo","value","_objectSpread","Provider","action","filter","n","read","map","id","Math","max","useNotification","context","Error"],"sources":["E:/Academic SLIIT/Y3S1 Documents/CSSE/Assignment 2/Smart-health-care-system/frontend/src/contexts/NotificationContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\nimport { notificationService } from '../services/notificationService';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst NotificationContext = createContext();\r\n\r\n/**\r\n * Notification Context Provider\r\n * Manages notification state and provides notification methods\r\n */\r\nexport const NotificationProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(notificationReducer, {\r\n    notifications: [],\r\n    unreadCount: 0,\r\n    loading: false,\r\n    error: null\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Load notifications if user is authenticated\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      loadNotifications();\r\n    }\r\n  }, []);\r\n\r\n  const loadNotifications = async () => {\r\n    try {\r\n      dispatch({ type: 'SET_LOADING', payload: true });\r\n      const notifications = await notificationService.getNotifications();\r\n      \r\n      dispatch({\r\n        type: 'LOAD_NOTIFICATIONS_SUCCESS',\r\n        payload: notifications\r\n      });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: 'LOAD_NOTIFICATIONS_ERROR',\r\n        payload: error.message\r\n      });\r\n    }\r\n  };\r\n\r\n  const markAsRead = async (notificationId) => {\r\n    try {\r\n      await notificationService.markAsRead(notificationId);\r\n      dispatch({\r\n        type: 'MARK_AS_READ',\r\n        payload: notificationId\r\n      });\r\n    } catch (error) {\r\n      console.error('Error marking notification as read:', error);\r\n    }\r\n  };\r\n\r\n  const markAllAsRead = async () => {\r\n    try {\r\n      await notificationService.markAllAsRead();\r\n      dispatch({ type: 'MARK_ALL_AS_READ' });\r\n    } catch (error) {\r\n      console.error('Error marking all notifications as read:', error);\r\n    }\r\n  };\r\n\r\n  const addNotification = (notification) => {\r\n    dispatch({\r\n      type: 'ADD_NOTIFICATION',\r\n      payload: notification\r\n    });\r\n  };\r\n\r\n  const showToast = (message, type = 'info') => {\r\n    switch (type) {\r\n      case 'success':\r\n        toast.success(message);\r\n        break;\r\n      case 'error':\r\n        toast.error(message);\r\n        break;\r\n      case 'warning':\r\n        toast.warning(message);\r\n        break;\r\n      default:\r\n        toast.info(message);\r\n    }\r\n  };\r\n\r\n  const showSuccess = (message) => showToast(message, 'success');\r\n  const showError = (message) => showToast(message, 'error');\r\n  const showWarning = (message) => showToast(message, 'warning');\r\n  const showInfo = (message) => showToast(message, 'info');\r\n\r\n  const value = {\r\n    ...state,\r\n    loadNotifications,\r\n    markAsRead,\r\n    markAllAsRead,\r\n    addNotification,\r\n    showToast,\r\n    showSuccess,\r\n    showError,\r\n    showWarning,\r\n    showInfo\r\n  };\r\n\r\n  return (\r\n    <NotificationContext.Provider value={value}>\r\n      {children}\r\n    </NotificationContext.Provider>\r\n  );\r\n};\r\n\r\n/**\r\n * Notification Reducer\r\n * Handles notification state updates\r\n */\r\nconst notificationReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'SET_LOADING':\r\n      return { ...state, loading: action.payload };\r\n    case 'LOAD_NOTIFICATIONS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        notifications: action.payload,\r\n        unreadCount: action.payload.filter(n => !n.read).length,\r\n        loading: false,\r\n        error: null\r\n      };\r\n    case 'LOAD_NOTIFICATIONS_ERROR':\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: action.payload\r\n      };\r\n    case 'MARK_AS_READ':\r\n      return {\r\n        ...state,\r\n        notifications: state.notifications.map(n =>\r\n          n.id === action.payload ? { ...n, read: true } : n\r\n        ),\r\n        unreadCount: Math.max(0, state.unreadCount - 1)\r\n      };\r\n    case 'MARK_ALL_AS_READ':\r\n      return {\r\n        ...state,\r\n        notifications: state.notifications.map(n => ({ ...n, read: true })),\r\n        unreadCount: 0\r\n      };\r\n    case 'ADD_NOTIFICATION':\r\n      return {\r\n        ...state,\r\n        notifications: [action.payload, ...state.notifications],\r\n        unreadCount: state.unreadCount + 1\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n/**\r\n * Custom hook to use notification context\r\n */\r\nexport const useNotification = () => {\r\n  const context = useContext(NotificationContext);\r\n  if (!context) {\r\n    throw new Error('useNotification must be used within a NotificationProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}