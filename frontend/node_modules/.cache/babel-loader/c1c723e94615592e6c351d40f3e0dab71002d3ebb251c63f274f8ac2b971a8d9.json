{"ast":null,"code":"import{VALIDATION_RULES}from'./constants';/**\r\n * Validation utility functions\r\n * Provides form validation helpers for the Smart Healthcare System\r\n *//**\r\n * Validates email format\r\n * @param {string} email - Email to validate\r\n * @returns {boolean} - True if valid email format\r\n */export const isValidEmail=email=>{return VALIDATION_RULES.EMAIL_REGEX.test(email);};/**\r\n * Validates password strength\r\n * @param {string} password - Password to validate\r\n * @returns {object} - Validation result with isValid and message\r\n */export const validatePassword=password=>{if(!password){return{isValid:false,message:'Password is required'};}if(password.length<VALIDATION_RULES.PASSWORD_MIN_LENGTH){return{isValid:false,message:\"Password must be at least \".concat(VALIDATION_RULES.PASSWORD_MIN_LENGTH,\" characters long\")};}return{isValid:true,message:'Password is valid'};};/**\r\n * Validates phone number format\r\n * @param {string} phone - Phone number to validate\r\n * @returns {boolean} - True if valid phone format\r\n */export const isValidPhone=phone=>{return VALIDATION_RULES.PHONE_REGEX.test(phone);};/**\r\n * Validates health card number format\r\n * @param {string} healthCard - Health card number to validate\r\n * @returns {boolean} - True if valid health card format\r\n */export const isValidHealthCard=healthCard=>{return VALIDATION_RULES.HEALTH_CARD_REGEX.test(healthCard);};/**\r\n * Validates required field\r\n * @param {any} value - Value to validate\r\n * @param {string} fieldName - Name of the field for error message\r\n * @returns {object} - Validation result\r\n */export const validateRequired=(value,fieldName)=>{if(!value||typeof value==='string'&&value.trim()===''){return{isValid:false,message:\"\".concat(fieldName,\" is required\")};}return{isValid:true,message:''};};/**\r\n * Validates date\r\n * @param {string|Date} date - Date to validate\r\n * @returns {object} - Validation result\r\n */export const validateDate=date=>{if(!date){return{isValid:false,message:'Date is required'};}const dateObj=new Date(date);if(isNaN(dateObj.getTime())){return{isValid:false,message:'Invalid date format'};}return{isValid:true,message:''};};/**\r\n * Validates future date\r\n * @param {string|Date} date - Date to validate\r\n * @returns {object} - Validation result\r\n */export const validateFutureDate=date=>{const dateValidation=validateDate(date);if(!dateValidation.isValid){return dateValidation;}const dateObj=new Date(date);const now=new Date();if(dateObj<=now){return{isValid:false,message:'Date must be in the future'};}return{isValid:true,message:''};};/**\r\n * Validates appointment form\r\n * @param {object} formData - Form data to validate\r\n * @returns {object} - Validation result with errors\r\n */export const validateAppointmentForm=formData=>{const errors={};// Validate doctor selection\nif(!formData.doctorId){errors.doctorId='Please select a doctor';}// Validate date\nconst dateValidation=validateFutureDate(formData.date);if(!dateValidation.isValid){errors.date=dateValidation.message;}// Validate time\nif(!formData.time){errors.time='Please select a time slot';}// Validate reason\nconst reasonValidation=validateRequired(formData.reason,'Reason for appointment');if(!reasonValidation.isValid){errors.reason=reasonValidation.message;}return{isValid:Object.keys(errors).length===0,errors};};/**\r\n * Validates patient form\r\n * @param {object} formData - Form data to validate\r\n * @returns {object} - Validation result with errors\r\n */export const validatePatientForm=formData=>{const errors={};// Validate name\nconst nameValidation=validateRequired(formData.name,'Name');if(!nameValidation.isValid){errors.name=nameValidation.message;}// Validate email\nif(formData.email&&!isValidEmail(formData.email)){errors.email='Invalid email format';}// Validate phone\nif(formData.phone&&!isValidPhone(formData.phone)){errors.phone='Invalid phone number format';}// Validate health card\nif(formData.healthCardNumber&&!isValidHealthCard(formData.healthCardNumber)){errors.healthCardNumber='Invalid health card number format';}return{isValid:Object.keys(errors).length===0,errors};};/**\r\n * Validates payment form\r\n * @param {object} formData - Form data to validate\r\n * @returns {object} - Validation result with errors\r\n */export const validatePaymentForm=formData=>{const errors={};// Validate payment method\nif(!formData.paymentMethod){errors.paymentMethod='Please select a payment method';}// Validate amount\nif(!formData.amount||formData.amount<=0){errors.amount='Amount must be greater than 0';}// Validate card details if card payment\nif(formData.paymentMethod==='card'){if(!formData.cardNumber){errors.cardNumber='Card number is required';}if(!formData.expiryDate){errors.expiryDate='Expiry date is required';}if(!formData.cvv){errors.cvv='CVV is required';}}return{isValid:Object.keys(errors).length===0,errors};};/**\r\n * Validates login form\r\n * @param {object} formData - Form data to validate\r\n * @returns {object} - Validation result with errors\r\n */export const validateLoginForm=formData=>{const errors={};// Validate email\nif(!formData.email){errors.email='Email is required';}else if(!isValidEmail(formData.email)){errors.email='Invalid email format';}// Validate password\nconst passwordValidation=validatePassword(formData.password);if(!passwordValidation.isValid){errors.password=passwordValidation.message;}return{isValid:Object.keys(errors).length===0,errors};};","map":{"version":3,"names":["VALIDATION_RULES","isValidEmail","email","EMAIL_REGEX","test","validatePassword","password","isValid","message","length","PASSWORD_MIN_LENGTH","concat","isValidPhone","phone","PHONE_REGEX","isValidHealthCard","healthCard","HEALTH_CARD_REGEX","validateRequired","value","fieldName","trim","validateDate","date","dateObj","Date","isNaN","getTime","validateFutureDate","dateValidation","now","validateAppointmentForm","formData","errors","doctorId","time","reasonValidation","reason","Object","keys","validatePatientForm","nameValidation","name","healthCardNumber","validatePaymentForm","paymentMethod","amount","cardNumber","expiryDate","cvv","validateLoginForm","passwordValidation"],"sources":["E:/Academic SLIIT/Y3S1 Documents/CSSE/Assignment 2/Smart-health-care-system/frontend/src/utils/validators.js"],"sourcesContent":["import { VALIDATION_RULES } from './constants';\r\n\r\n/**\r\n * Validation utility functions\r\n * Provides form validation helpers for the Smart Healthcare System\r\n */\r\n\r\n/**\r\n * Validates email format\r\n * @param {string} email - Email to validate\r\n * @returns {boolean} - True if valid email format\r\n */\r\nexport const isValidEmail = (email) => {\r\n  return VALIDATION_RULES.EMAIL_REGEX.test(email);\r\n};\r\n\r\n/**\r\n * Validates password strength\r\n * @param {string} password - Password to validate\r\n * @returns {object} - Validation result with isValid and message\r\n */\r\nexport const validatePassword = (password) => {\r\n  if (!password) {\r\n    return { isValid: false, message: 'Password is required' };\r\n  }\r\n  \r\n  if (password.length < VALIDATION_RULES.PASSWORD_MIN_LENGTH) {\r\n    return { \r\n      isValid: false, \r\n      message: `Password must be at least ${VALIDATION_RULES.PASSWORD_MIN_LENGTH} characters long` \r\n    };\r\n  }\r\n  \r\n  return { isValid: true, message: 'Password is valid' };\r\n};\r\n\r\n/**\r\n * Validates phone number format\r\n * @param {string} phone - Phone number to validate\r\n * @returns {boolean} - True if valid phone format\r\n */\r\nexport const isValidPhone = (phone) => {\r\n  return VALIDATION_RULES.PHONE_REGEX.test(phone);\r\n};\r\n\r\n/**\r\n * Validates health card number format\r\n * @param {string} healthCard - Health card number to validate\r\n * @returns {boolean} - True if valid health card format\r\n */\r\nexport const isValidHealthCard = (healthCard) => {\r\n  return VALIDATION_RULES.HEALTH_CARD_REGEX.test(healthCard);\r\n};\r\n\r\n/**\r\n * Validates required field\r\n * @param {any} value - Value to validate\r\n * @param {string} fieldName - Name of the field for error message\r\n * @returns {object} - Validation result\r\n */\r\nexport const validateRequired = (value, fieldName) => {\r\n  if (!value || (typeof value === 'string' && value.trim() === '')) {\r\n    return { isValid: false, message: `${fieldName} is required` };\r\n  }\r\n  return { isValid: true, message: '' };\r\n};\r\n\r\n/**\r\n * Validates date\r\n * @param {string|Date} date - Date to validate\r\n * @returns {object} - Validation result\r\n */\r\nexport const validateDate = (date) => {\r\n  if (!date) {\r\n    return { isValid: false, message: 'Date is required' };\r\n  }\r\n  \r\n  const dateObj = new Date(date);\r\n  if (isNaN(dateObj.getTime())) {\r\n    return { isValid: false, message: 'Invalid date format' };\r\n  }\r\n  \r\n  return { isValid: true, message: '' };\r\n};\r\n\r\n/**\r\n * Validates future date\r\n * @param {string|Date} date - Date to validate\r\n * @returns {object} - Validation result\r\n */\r\nexport const validateFutureDate = (date) => {\r\n  const dateValidation = validateDate(date);\r\n  if (!dateValidation.isValid) {\r\n    return dateValidation;\r\n  }\r\n  \r\n  const dateObj = new Date(date);\r\n  const now = new Date();\r\n  \r\n  if (dateObj <= now) {\r\n    return { isValid: false, message: 'Date must be in the future' };\r\n  }\r\n  \r\n  return { isValid: true, message: '' };\r\n};\r\n\r\n/**\r\n * Validates appointment form\r\n * @param {object} formData - Form data to validate\r\n * @returns {object} - Validation result with errors\r\n */\r\nexport const validateAppointmentForm = (formData) => {\r\n  const errors = {};\r\n  \r\n  // Validate doctor selection\r\n  if (!formData.doctorId) {\r\n    errors.doctorId = 'Please select a doctor';\r\n  }\r\n  \r\n  // Validate date\r\n  const dateValidation = validateFutureDate(formData.date);\r\n  if (!dateValidation.isValid) {\r\n    errors.date = dateValidation.message;\r\n  }\r\n  \r\n  // Validate time\r\n  if (!formData.time) {\r\n    errors.time = 'Please select a time slot';\r\n  }\r\n  \r\n  // Validate reason\r\n  const reasonValidation = validateRequired(formData.reason, 'Reason for appointment');\r\n  if (!reasonValidation.isValid) {\r\n    errors.reason = reasonValidation.message;\r\n  }\r\n  \r\n  return {\r\n    isValid: Object.keys(errors).length === 0,\r\n    errors\r\n  };\r\n};\r\n\r\n/**\r\n * Validates patient form\r\n * @param {object} formData - Form data to validate\r\n * @returns {object} - Validation result with errors\r\n */\r\nexport const validatePatientForm = (formData) => {\r\n  const errors = {};\r\n  \r\n  // Validate name\r\n  const nameValidation = validateRequired(formData.name, 'Name');\r\n  if (!nameValidation.isValid) {\r\n    errors.name = nameValidation.message;\r\n  }\r\n  \r\n  // Validate email\r\n  if (formData.email && !isValidEmail(formData.email)) {\r\n    errors.email = 'Invalid email format';\r\n  }\r\n  \r\n  // Validate phone\r\n  if (formData.phone && !isValidPhone(formData.phone)) {\r\n    errors.phone = 'Invalid phone number format';\r\n  }\r\n  \r\n  // Validate health card\r\n  if (formData.healthCardNumber && !isValidHealthCard(formData.healthCardNumber)) {\r\n    errors.healthCardNumber = 'Invalid health card number format';\r\n  }\r\n  \r\n  return {\r\n    isValid: Object.keys(errors).length === 0,\r\n    errors\r\n  };\r\n};\r\n\r\n/**\r\n * Validates payment form\r\n * @param {object} formData - Form data to validate\r\n * @returns {object} - Validation result with errors\r\n */\r\nexport const validatePaymentForm = (formData) => {\r\n  const errors = {};\r\n  \r\n  // Validate payment method\r\n  if (!formData.paymentMethod) {\r\n    errors.paymentMethod = 'Please select a payment method';\r\n  }\r\n  \r\n  // Validate amount\r\n  if (!formData.amount || formData.amount <= 0) {\r\n    errors.amount = 'Amount must be greater than 0';\r\n  }\r\n  \r\n  // Validate card details if card payment\r\n  if (formData.paymentMethod === 'card') {\r\n    if (!formData.cardNumber) {\r\n      errors.cardNumber = 'Card number is required';\r\n    }\r\n    if (!formData.expiryDate) {\r\n      errors.expiryDate = 'Expiry date is required';\r\n    }\r\n    if (!formData.cvv) {\r\n      errors.cvv = 'CVV is required';\r\n    }\r\n  }\r\n  \r\n  return {\r\n    isValid: Object.keys(errors).length === 0,\r\n    errors\r\n  };\r\n};\r\n\r\n/**\r\n * Validates login form\r\n * @param {object} formData - Form data to validate\r\n * @returns {object} - Validation result with errors\r\n */\r\nexport const validateLoginForm = (formData) => {\r\n  const errors = {};\r\n  \r\n  // Validate email\r\n  if (!formData.email) {\r\n    errors.email = 'Email is required';\r\n  } else if (!isValidEmail(formData.email)) {\r\n    errors.email = 'Invalid email format';\r\n  }\r\n  \r\n  // Validate password\r\n  const passwordValidation = validatePassword(formData.password);\r\n  if (!passwordValidation.isValid) {\r\n    errors.password = passwordValidation.message;\r\n  }\r\n  \r\n  return {\r\n    isValid: Object.keys(errors).length === 0,\r\n    errors\r\n  };\r\n};"],"mappings":"AAAA,OAASA,gBAAgB,KAAQ,aAAa,CAE9C;AACA;AACA;AACA,GAEA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,YAAY,CAAIC,KAAK,EAAK,CACrC,MAAO,CAAAF,gBAAgB,CAACG,WAAW,CAACC,IAAI,CAACF,KAAK,CAAC,CACjD,CAAC,CAED;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAG,gBAAgB,CAAIC,QAAQ,EAAK,CAC5C,GAAI,CAACA,QAAQ,CAAE,CACb,MAAO,CAAEC,OAAO,CAAE,KAAK,CAAEC,OAAO,CAAE,sBAAuB,CAAC,CAC5D,CAEA,GAAIF,QAAQ,CAACG,MAAM,CAAGT,gBAAgB,CAACU,mBAAmB,CAAE,CAC1D,MAAO,CACLH,OAAO,CAAE,KAAK,CACdC,OAAO,8BAAAG,MAAA,CAA+BX,gBAAgB,CAACU,mBAAmB,oBAC5E,CAAC,CACH,CAEA,MAAO,CAAEH,OAAO,CAAE,IAAI,CAAEC,OAAO,CAAE,mBAAoB,CAAC,CACxD,CAAC,CAED;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAI,YAAY,CAAIC,KAAK,EAAK,CACrC,MAAO,CAAAb,gBAAgB,CAACc,WAAW,CAACV,IAAI,CAACS,KAAK,CAAC,CACjD,CAAC,CAED;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAE,iBAAiB,CAAIC,UAAU,EAAK,CAC/C,MAAO,CAAAhB,gBAAgB,CAACiB,iBAAiB,CAACb,IAAI,CAACY,UAAU,CAAC,CAC5D,CAAC,CAED;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAE,gBAAgB,CAAGA,CAACC,KAAK,CAAEC,SAAS,GAAK,CACpD,GAAI,CAACD,KAAK,EAAK,MAAO,CAAAA,KAAK,GAAK,QAAQ,EAAIA,KAAK,CAACE,IAAI,CAAC,CAAC,GAAK,EAAG,CAAE,CAChE,MAAO,CAAEd,OAAO,CAAE,KAAK,CAAEC,OAAO,IAAAG,MAAA,CAAKS,SAAS,gBAAe,CAAC,CAChE,CACA,MAAO,CAAEb,OAAO,CAAE,IAAI,CAAEC,OAAO,CAAE,EAAG,CAAC,CACvC,CAAC,CAED;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAc,YAAY,CAAIC,IAAI,EAAK,CACpC,GAAI,CAACA,IAAI,CAAE,CACT,MAAO,CAAEhB,OAAO,CAAE,KAAK,CAAEC,OAAO,CAAE,kBAAmB,CAAC,CACxD,CAEA,KAAM,CAAAgB,OAAO,CAAG,GAAI,CAAAC,IAAI,CAACF,IAAI,CAAC,CAC9B,GAAIG,KAAK,CAACF,OAAO,CAACG,OAAO,CAAC,CAAC,CAAC,CAAE,CAC5B,MAAO,CAAEpB,OAAO,CAAE,KAAK,CAAEC,OAAO,CAAE,qBAAsB,CAAC,CAC3D,CAEA,MAAO,CAAED,OAAO,CAAE,IAAI,CAAEC,OAAO,CAAE,EAAG,CAAC,CACvC,CAAC,CAED;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAoB,kBAAkB,CAAIL,IAAI,EAAK,CAC1C,KAAM,CAAAM,cAAc,CAAGP,YAAY,CAACC,IAAI,CAAC,CACzC,GAAI,CAACM,cAAc,CAACtB,OAAO,CAAE,CAC3B,MAAO,CAAAsB,cAAc,CACvB,CAEA,KAAM,CAAAL,OAAO,CAAG,GAAI,CAAAC,IAAI,CAACF,IAAI,CAAC,CAC9B,KAAM,CAAAO,GAAG,CAAG,GAAI,CAAAL,IAAI,CAAC,CAAC,CAEtB,GAAID,OAAO,EAAIM,GAAG,CAAE,CAClB,MAAO,CAAEvB,OAAO,CAAE,KAAK,CAAEC,OAAO,CAAE,4BAA6B,CAAC,CAClE,CAEA,MAAO,CAAED,OAAO,CAAE,IAAI,CAAEC,OAAO,CAAE,EAAG,CAAC,CACvC,CAAC,CAED;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAuB,uBAAuB,CAAIC,QAAQ,EAAK,CACnD,KAAM,CAAAC,MAAM,CAAG,CAAC,CAAC,CAEjB;AACA,GAAI,CAACD,QAAQ,CAACE,QAAQ,CAAE,CACtBD,MAAM,CAACC,QAAQ,CAAG,wBAAwB,CAC5C,CAEA;AACA,KAAM,CAAAL,cAAc,CAAGD,kBAAkB,CAACI,QAAQ,CAACT,IAAI,CAAC,CACxD,GAAI,CAACM,cAAc,CAACtB,OAAO,CAAE,CAC3B0B,MAAM,CAACV,IAAI,CAAGM,cAAc,CAACrB,OAAO,CACtC,CAEA;AACA,GAAI,CAACwB,QAAQ,CAACG,IAAI,CAAE,CAClBF,MAAM,CAACE,IAAI,CAAG,2BAA2B,CAC3C,CAEA;AACA,KAAM,CAAAC,gBAAgB,CAAGlB,gBAAgB,CAACc,QAAQ,CAACK,MAAM,CAAE,wBAAwB,CAAC,CACpF,GAAI,CAACD,gBAAgB,CAAC7B,OAAO,CAAE,CAC7B0B,MAAM,CAACI,MAAM,CAAGD,gBAAgB,CAAC5B,OAAO,CAC1C,CAEA,MAAO,CACLD,OAAO,CAAE+B,MAAM,CAACC,IAAI,CAACN,MAAM,CAAC,CAACxB,MAAM,GAAK,CAAC,CACzCwB,MACF,CAAC,CACH,CAAC,CAED;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAO,mBAAmB,CAAIR,QAAQ,EAAK,CAC/C,KAAM,CAAAC,MAAM,CAAG,CAAC,CAAC,CAEjB;AACA,KAAM,CAAAQ,cAAc,CAAGvB,gBAAgB,CAACc,QAAQ,CAACU,IAAI,CAAE,MAAM,CAAC,CAC9D,GAAI,CAACD,cAAc,CAAClC,OAAO,CAAE,CAC3B0B,MAAM,CAACS,IAAI,CAAGD,cAAc,CAACjC,OAAO,CACtC,CAEA;AACA,GAAIwB,QAAQ,CAAC9B,KAAK,EAAI,CAACD,YAAY,CAAC+B,QAAQ,CAAC9B,KAAK,CAAC,CAAE,CACnD+B,MAAM,CAAC/B,KAAK,CAAG,sBAAsB,CACvC,CAEA;AACA,GAAI8B,QAAQ,CAACnB,KAAK,EAAI,CAACD,YAAY,CAACoB,QAAQ,CAACnB,KAAK,CAAC,CAAE,CACnDoB,MAAM,CAACpB,KAAK,CAAG,6BAA6B,CAC9C,CAEA;AACA,GAAImB,QAAQ,CAACW,gBAAgB,EAAI,CAAC5B,iBAAiB,CAACiB,QAAQ,CAACW,gBAAgB,CAAC,CAAE,CAC9EV,MAAM,CAACU,gBAAgB,CAAG,mCAAmC,CAC/D,CAEA,MAAO,CACLpC,OAAO,CAAE+B,MAAM,CAACC,IAAI,CAACN,MAAM,CAAC,CAACxB,MAAM,GAAK,CAAC,CACzCwB,MACF,CAAC,CACH,CAAC,CAED;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAW,mBAAmB,CAAIZ,QAAQ,EAAK,CAC/C,KAAM,CAAAC,MAAM,CAAG,CAAC,CAAC,CAEjB;AACA,GAAI,CAACD,QAAQ,CAACa,aAAa,CAAE,CAC3BZ,MAAM,CAACY,aAAa,CAAG,gCAAgC,CACzD,CAEA;AACA,GAAI,CAACb,QAAQ,CAACc,MAAM,EAAId,QAAQ,CAACc,MAAM,EAAI,CAAC,CAAE,CAC5Cb,MAAM,CAACa,MAAM,CAAG,+BAA+B,CACjD,CAEA;AACA,GAAId,QAAQ,CAACa,aAAa,GAAK,MAAM,CAAE,CACrC,GAAI,CAACb,QAAQ,CAACe,UAAU,CAAE,CACxBd,MAAM,CAACc,UAAU,CAAG,yBAAyB,CAC/C,CACA,GAAI,CAACf,QAAQ,CAACgB,UAAU,CAAE,CACxBf,MAAM,CAACe,UAAU,CAAG,yBAAyB,CAC/C,CACA,GAAI,CAAChB,QAAQ,CAACiB,GAAG,CAAE,CACjBhB,MAAM,CAACgB,GAAG,CAAG,iBAAiB,CAChC,CACF,CAEA,MAAO,CACL1C,OAAO,CAAE+B,MAAM,CAACC,IAAI,CAACN,MAAM,CAAC,CAACxB,MAAM,GAAK,CAAC,CACzCwB,MACF,CAAC,CACH,CAAC,CAED;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAiB,iBAAiB,CAAIlB,QAAQ,EAAK,CAC7C,KAAM,CAAAC,MAAM,CAAG,CAAC,CAAC,CAEjB;AACA,GAAI,CAACD,QAAQ,CAAC9B,KAAK,CAAE,CACnB+B,MAAM,CAAC/B,KAAK,CAAG,mBAAmB,CACpC,CAAC,IAAM,IAAI,CAACD,YAAY,CAAC+B,QAAQ,CAAC9B,KAAK,CAAC,CAAE,CACxC+B,MAAM,CAAC/B,KAAK,CAAG,sBAAsB,CACvC,CAEA;AACA,KAAM,CAAAiD,kBAAkB,CAAG9C,gBAAgB,CAAC2B,QAAQ,CAAC1B,QAAQ,CAAC,CAC9D,GAAI,CAAC6C,kBAAkB,CAAC5C,OAAO,CAAE,CAC/B0B,MAAM,CAAC3B,QAAQ,CAAG6C,kBAAkB,CAAC3C,OAAO,CAC9C,CAEA,MAAO,CACLD,OAAO,CAAE+B,MAAM,CAACC,IAAI,CAACN,MAAM,CAAC,CAACxB,MAAM,GAAK,CAAC,CACzCwB,MACF,CAAC,CACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}