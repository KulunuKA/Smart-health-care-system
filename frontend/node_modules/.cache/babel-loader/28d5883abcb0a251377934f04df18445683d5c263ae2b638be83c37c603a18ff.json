{"ast":null,"code":"var _jsxFileName = \"E:\\\\Academic SLIIT\\\\Y3S1 Documents\\\\CSSE\\\\Assignment 2\\\\Smart-health-care-system\\\\frontend\\\\src\\\\contexts\\\\NotificationContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { notificationService } from '../services/notificationService';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext();\n\n/**\r\n * Notification Context Provider\r\n * Manages notification state and provides notification methods\r\n */\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(notificationReducer, {\n    notifications: [],\n    unreadCount: 0,\n    loading: false,\n    error: null\n  });\n  useEffect(() => {\n    // Load notifications if user is authenticated\n    const token = localStorage.getItem('token');\n    if (token) {\n      loadNotifications();\n    }\n  }, []);\n  const loadNotifications = async () => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      const notifications = await notificationService.getNotifications();\n      dispatch({\n        type: 'LOAD_NOTIFICATIONS_SUCCESS',\n        payload: notifications\n      });\n    } catch (error) {\n      dispatch({\n        type: 'LOAD_NOTIFICATIONS_ERROR',\n        payload: error.message\n      });\n    }\n  };\n  const markAsRead = async notificationId => {\n    try {\n      await notificationService.markAsRead(notificationId);\n      dispatch({\n        type: 'MARK_AS_READ',\n        payload: notificationId\n      });\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n    }\n  };\n  const markAllAsRead = async () => {\n    try {\n      await notificationService.markAllAsRead();\n      dispatch({\n        type: 'MARK_ALL_AS_READ'\n      });\n    } catch (error) {\n      console.error('Error marking all notifications as read:', error);\n    }\n  };\n  const addNotification = notification => {\n    dispatch({\n      type: 'ADD_NOTIFICATION',\n      payload: notification\n    });\n  };\n  const showToast = (message, type = 'info') => {\n    switch (type) {\n      case 'success':\n        toast.success(message);\n        break;\n      case 'error':\n        toast.error(message);\n        break;\n      case 'warning':\n        toast.warning(message);\n        break;\n      default:\n        toast.info(message);\n    }\n  };\n  const showSuccess = message => showToast(message, 'success');\n  const showError = message => showToast(message, 'error');\n  const showWarning = message => showToast(message, 'warning');\n  const showInfo = message => showToast(message, 'info');\n  const value = {\n    ...state,\n    loadNotifications,\n    markAsRead,\n    markAllAsRead,\n    addNotification,\n    showToast,\n    showSuccess,\n    showError,\n    showWarning,\n    showInfo\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n\n/**\r\n * Notification Reducer\r\n * Handles notification state updates\r\n */\n_s(NotificationProvider, \"Zb/tnBdvLN6bi+fOEm8l01kiRGg=\");\n_c = NotificationProvider;\nconst notificationReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case 'LOAD_NOTIFICATIONS_SUCCESS':\n      return {\n        ...state,\n        notifications: action.payload,\n        unreadCount: action.payload.filter(n => !n.read).length,\n        loading: false,\n        error: null\n      };\n    case 'LOAD_NOTIFICATIONS_ERROR':\n      return {\n        ...state,\n        loading: false,\n        error: action.payload\n      };\n    case 'MARK_AS_READ':\n      return {\n        ...state,\n        notifications: state.notifications.map(n => n.id === action.payload ? {\n          ...n,\n          read: true\n        } : n),\n        unreadCount: Math.max(0, state.unreadCount - 1)\n      };\n    case 'MARK_ALL_AS_READ':\n      return {\n        ...state,\n        notifications: state.notifications.map(n => ({\n          ...n,\n          read: true\n        })),\n        unreadCount: 0\n      };\n    case 'ADD_NOTIFICATION':\n      return {\n        ...state,\n        notifications: [action.payload, ...state.notifications],\n        unreadCount: state.unreadCount + 1\n      };\n    default:\n      return state;\n  }\n};\n\n/**\r\n * Custom hook to use notification context\r\n */\nexport const useNotification = () => {\n  _s2();\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotification must be used within a NotificationProvider');\n  }\n  return context;\n};\n_s2(useNotification, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","notificationService","toast","jsxDEV","_jsxDEV","NotificationContext","NotificationProvider","children","_s","state","dispatch","notificationReducer","notifications","unreadCount","loading","error","token","localStorage","getItem","loadNotifications","type","payload","getNotifications","message","markAsRead","notificationId","console","markAllAsRead","addNotification","notification","showToast","success","warning","info","showSuccess","showError","showWarning","showInfo","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","action","filter","n","read","length","map","id","Math","max","useNotification","_s2","context","Error","$RefreshReg$"],"sources":["E:/Academic SLIIT/Y3S1 Documents/CSSE/Assignment 2/Smart-health-care-system/frontend/src/contexts/NotificationContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\nimport { notificationService } from '../services/notificationService';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst NotificationContext = createContext();\r\n\r\n/**\r\n * Notification Context Provider\r\n * Manages notification state and provides notification methods\r\n */\r\nexport const NotificationProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(notificationReducer, {\r\n    notifications: [],\r\n    unreadCount: 0,\r\n    loading: false,\r\n    error: null\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Load notifications if user is authenticated\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      loadNotifications();\r\n    }\r\n  }, []);\r\n\r\n  const loadNotifications = async () => {\r\n    try {\r\n      dispatch({ type: 'SET_LOADING', payload: true });\r\n      const notifications = await notificationService.getNotifications();\r\n      \r\n      dispatch({\r\n        type: 'LOAD_NOTIFICATIONS_SUCCESS',\r\n        payload: notifications\r\n      });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: 'LOAD_NOTIFICATIONS_ERROR',\r\n        payload: error.message\r\n      });\r\n    }\r\n  };\r\n\r\n  const markAsRead = async (notificationId) => {\r\n    try {\r\n      await notificationService.markAsRead(notificationId);\r\n      dispatch({\r\n        type: 'MARK_AS_READ',\r\n        payload: notificationId\r\n      });\r\n    } catch (error) {\r\n      console.error('Error marking notification as read:', error);\r\n    }\r\n  };\r\n\r\n  const markAllAsRead = async () => {\r\n    try {\r\n      await notificationService.markAllAsRead();\r\n      dispatch({ type: 'MARK_ALL_AS_READ' });\r\n    } catch (error) {\r\n      console.error('Error marking all notifications as read:', error);\r\n    }\r\n  };\r\n\r\n  const addNotification = (notification) => {\r\n    dispatch({\r\n      type: 'ADD_NOTIFICATION',\r\n      payload: notification\r\n    });\r\n  };\r\n\r\n  const showToast = (message, type = 'info') => {\r\n    switch (type) {\r\n      case 'success':\r\n        toast.success(message);\r\n        break;\r\n      case 'error':\r\n        toast.error(message);\r\n        break;\r\n      case 'warning':\r\n        toast.warning(message);\r\n        break;\r\n      default:\r\n        toast.info(message);\r\n    }\r\n  };\r\n\r\n  const showSuccess = (message) => showToast(message, 'success');\r\n  const showError = (message) => showToast(message, 'error');\r\n  const showWarning = (message) => showToast(message, 'warning');\r\n  const showInfo = (message) => showToast(message, 'info');\r\n\r\n  const value = {\r\n    ...state,\r\n    loadNotifications,\r\n    markAsRead,\r\n    markAllAsRead,\r\n    addNotification,\r\n    showToast,\r\n    showSuccess,\r\n    showError,\r\n    showWarning,\r\n    showInfo\r\n  };\r\n\r\n  return (\r\n    <NotificationContext.Provider value={value}>\r\n      {children}\r\n    </NotificationContext.Provider>\r\n  );\r\n};\r\n\r\n/**\r\n * Notification Reducer\r\n * Handles notification state updates\r\n */\r\nconst notificationReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'SET_LOADING':\r\n      return { ...state, loading: action.payload };\r\n    case 'LOAD_NOTIFICATIONS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        notifications: action.payload,\r\n        unreadCount: action.payload.filter(n => !n.read).length,\r\n        loading: false,\r\n        error: null\r\n      };\r\n    case 'LOAD_NOTIFICATIONS_ERROR':\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: action.payload\r\n      };\r\n    case 'MARK_AS_READ':\r\n      return {\r\n        ...state,\r\n        notifications: state.notifications.map(n =>\r\n          n.id === action.payload ? { ...n, read: true } : n\r\n        ),\r\n        unreadCount: Math.max(0, state.unreadCount - 1)\r\n      };\r\n    case 'MARK_ALL_AS_READ':\r\n      return {\r\n        ...state,\r\n        notifications: state.notifications.map(n => ({ ...n, read: true })),\r\n        unreadCount: 0\r\n      };\r\n    case 'ADD_NOTIFICATION':\r\n      return {\r\n        ...state,\r\n        notifications: [action.payload, ...state.notifications],\r\n        unreadCount: state.unreadCount + 1\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n/**\r\n * Custom hook to use notification context\r\n */\r\nexport const useNotification = () => {\r\n  const context = useContext(NotificationContext);\r\n  if (!context) {\r\n    throw new Error('useNotification must be used within a NotificationProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}